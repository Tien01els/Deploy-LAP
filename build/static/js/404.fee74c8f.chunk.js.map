{"version":3,"file":"static/js/404.fee74c8f.chunk.js","mappings":"mXAYMA,GAAWC,EAAAA,EAAAA,KA0LjB,EAxL8B,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBAChD,GAOIC,EAAAA,EAAAA,MANUC,EADd,EACIC,SACcC,EAFlB,EAEIC,aACOC,EAHX,EAGIC,MACWC,EAJf,EAIIC,UACAC,EALJ,EAKIA,MACAC,EANJ,EAMIA,QAEAC,EAAaF,EAAM,WAEvB,GAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8DF,EAAAA,EAAAA,UAAS,IAAvE,eAAOG,EAAP,KAAgCC,EAAhC,KAEMC,EAAY,yCAAG,kHAEKtB,EAASuB,IAAIC,EAAAA,EAAO,iBAFzB,OAEPC,EAFO,OAGbN,EAAUM,EAAIC,MAHD,gDAKbC,QAAQC,IAAR,MALa,yDAAH,sDASlBC,EAAAA,EAAAA,YAAU,WACNP,GACH,GAAE,IAEH,IAAMQ,EAA2B,yCAAG,kHAKV9B,EAASuB,IAAIC,EAAAA,EAAO,qCAA0BR,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAYe,KALhD,OAKtBN,EALsB,OAM5BJ,EAA2BI,EAAIC,MANH,gDAQ5BC,QAAQC,IAAR,MAR4B,yDAAH,sDAYjCC,EAAAA,EAAAA,YAAU,WACNC,GAEH,GAAE,CAACd,IAEJ,IAAMgB,EAAsB,yCAAG,WAAON,GAAP,gGAEjBO,EAAoB,UAAAP,EAAKQ,2BAAL,SAA0BH,GAC9C,CACIG,oBAAqBR,EAAKQ,oBAAoBH,IAElD,CAAC,EACDI,GAPiB,QAQnBC,UAAWV,EAAKU,UAChBC,YAAaX,EAAKW,YAClBC,QAASZ,EAAKY,QAAQP,GACtBQ,UAAWb,EAAKc,QACbP,GAZgB,SAcjBjC,EAASyC,KAAKjB,EAAAA,EAAO,QAAYW,GAdhB,OAevB/B,IACAD,GAAU,GAhBa,gDAkBvBwB,QAAQC,IAAR,OACAc,EAAAA,EAAAA,IAAM,uBAnBiB,yDAAH,sDAkC5B,OAZAb,EAAAA,EAAAA,YAAU,WACFjB,EAAgB+B,qBAChBjC,EAAY,CACR0B,UAAW,GACXC,YAAa,GACbC,SAAU,EACVJ,qBAAsB,IAE1B/B,GAAU,GAGjB,GAAE,CAACS,EAAiBF,KAEjB,UAAC,IAAD,CACIR,OAAQA,EACR0C,MAAOC,EAAAA,EACPC,2BAA2B,EAC3BC,aAAa,gBACbC,aAAa,EALjB,WAOI,gBAAKC,UAAU,mBAAf,UACI,mBAAQC,QAAS,kBAAM/C,GAAU,EAAhB,EAAjB,UACI,cAAG8C,UAAU,sBAGrB,kBACIA,UAAU,2BACVE,SAAU3C,EAAuBwB,GAFrC,WAII,iBAAKiB,UAAU,sBAAf,WACI,gBAAKA,UAAU,sBAAf,UACI,eAAIA,UAAU,yBAAd,iCAEJ,iBAAKA,UAAU,sBAAf,WACI,kBAAOG,QAAQ,YAAf,yBACA,0BACIC,KAAK,OACLC,KAAK,YACLC,YAAY,mBACZN,UAAU,2FACN3C,EAAyB,YAAa,CAAEkD,UAAU,UAG9D,iBAAKP,UAAU,sBAAf,WACI,kBAAOG,QAAQ,cAAf,gCACA,6BACIC,KAAK,OACLC,KAAK,cACLC,YAAY,cACZN,UAAU,uGACN3C,EAAyB,cAAe,CAAEkD,UAAU,UAGhE,iBAAKP,UAAU,mCAAf,WACI,0BACIlB,GAAG,kBACHsB,KAAK,YACD/C,EAAyB,aAEjC,kBAAO8C,QAAQ,kBAAkBH,UAAU,6BAA3C,4BAIJ,iBAAKA,UAAU,sBAAf,WACI,kBAAOG,QAAQ,UAAf,oBACA,SAAC,KAAD,CACIE,KAAK,UACLvC,QAASA,EACT0C,MAAO,CAAED,UAAU,GACnBE,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACJ,SAAC,MAAD,kBACQA,GADR,IAEIC,SAAUD,EAAMC,SAChBC,QAAS3C,EACT4C,eAAgB,SAACC,GAAD,OAAYA,EAAOhC,EAAnB,EAChBiC,eAAgB,SAACD,GAAD,OAAYA,EAAOE,SAAnB,EAChBC,OAAQ,CACJC,SAAU,SAACC,GAAD,eAAC,UACJA,GADG,IAENC,UAAW,SAFL,KARd,QAkBhB,iBAAKpB,UAAU,sBAAf,WACI,kBAAOG,QAAQ,sBAAf,iCACwB,OAAvBhC,QAAuB,IAAvBA,OAAA,EAAAA,EAAyBkD,QAAS,IAC/B,SAAC,KAAD,CACIhB,KAAK,sBACLvC,QAASA,EACT2C,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACJ,SAAC,MAAD,kBACQA,GADR,IAEIE,QAASzC,EACT0C,eAAgB,SAACC,GAAD,OAAYA,EAAOhC,EAAnB,EAChBiC,eAAgB,SAACD,GAAD,OAAYA,EAAO3B,SAAnB,EAChB8B,OAAQ,CACJC,SAAU,SAACC,GAAD,eAAC,UACJA,GADG,IAENC,UAAW,SAFL,KAPd,WAmBxB,SAACE,EAAA,EAAD,CAAQtB,UAAU,qCAAlB,yBAIf,ECnLKjD,GAAWC,EAAAA,EAAAA,KAsVjB,EAjVyB,WACrB,OAAgDgB,EAAAA,EAAAA,UAAS,IAAzD,eAAOuD,EAAP,KAAyBC,EAAzB,KACA,GAA0CxD,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOyD,EAAP,KAAsBC,EAAtB,KACA,GAAkC1D,EAAAA,EAAAA,UAAS,IAA3C,eAAO2D,EAAP,KAAkBC,EAAlB,KACA,GAA8C5D,EAAAA,EAAAA,WAAS,GAAvD,eAAO6D,EAAP,KAAwBC,EAAxB,KAGA,GAAoC9D,EAAAA,EAAAA,UAAS,IAA7C,eAAO+D,EAAP,KAAmBC,EAAnB,KAIA,GAA4BhE,EAAAA,EAAAA,UAAS,IAArC,eAAOiE,EAAP,KAAeC,EAAf,KACA,GAAwClE,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOmE,EAAP,KAAqBC,EAArB,KACA,GAA4CpE,EAAAA,EAAAA,YAA5C,eAAOqE,EAAP,KAAuBC,EAAvB,KACA,GAAkCtE,EAAAA,EAAAA,WAAS,GAA3C,eAAOuE,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,yCAAG,WAAOC,GAAP,qGAEA3F,EAASyC,KACvBjB,EAAAA,EAAU,aACV,CACIoE,MAAOD,EAAEE,OAAOC,MAAM,IAE1B,CACIC,QAAS,CAAE,eAAgB,yBARjB,OAEZtE,EAFY,OAWlB2D,EAAaY,SAAWvE,EAAIC,KAC5BuE,KAZkB,gDAclBtE,QAAQC,IAAR,MAC8B,MAA1B,KAAMsE,SAASC,QAAgBV,GAAa,GAf9B,yDAAH,sDAmBjBrF,GAAkBgG,EAAAA,EAAAA,cAAW,uBAAC,gHAExB1B,QAFwB,IAExBA,IAAAA,EAAe3C,GAFS,gCAGN/B,EAASuB,IACvBC,EAAAA,EAAO,qCAA0BkD,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAe3C,KAJ5B,OAGlBN,EAHkB,QAMlB4E,EAAS5E,EAAIC,MACR4C,OAAS,GAAhB,UAAqB+B,EAAO,UAA5B,OAAqB,EAAWC,UAAYhB,IAC5CC,EAAkBc,EAAO,GAAGC,SAC5BjB,EAAgBgB,EAAO,KAE3BxB,EAAapD,EAAIC,MAXO,yDAc5BC,QAAQC,IAAR,MAC8B,MAA1B,KAAMsE,SAASC,QAAgBV,GAAa,GAfpB,0DAiBjC,CAACH,EAAD,OAAiBZ,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAe3C,MAEnCF,EAAAA,EAAAA,YAAU,WACN6C,GAAiBtE,GACpB,GAAE,CAACsE,EAAetE,KAEnByB,EAAAA,EAAAA,YAAU,WACN,IAAM0E,EAAoB,yCAAG,yGACPvG,EAASuB,IAAIC,EAAAA,EAAO,iBADb,OACnBC,EADmB,OAEzBgD,EAAoBhD,EAAIC,MAFC,2CAAH,qDAI1B6E,GACH,GAAE,IAGH,IAAMC,IAAeC,EAAAA,EAAAA,QAAO,MAC5B,IAAkCxF,EAAAA,EAAAA,UAAS,IAA3C,iBAAOmB,GAAP,MAAkBsE,GAAlB,MACA,IAAoDzF,EAAAA,EAAAA,WAAS,GAA7D,iBAAO0F,GAAP,MAA2BC,GAA3B,MAOMC,GAAiB,yCAAG,WAAO9E,GAAP,+FAEZ/B,EAAS8G,OAAOtF,EAAAA,EAAO,gBAAYO,IAFvB,OAGlBwD,EAAkB,MAClBb,GAAiBtE,IAJC,gDAMlBuB,QAAQC,IAAR,MAC8B,MAA1B,KAAMsE,SAASC,QAAgBV,GAAa,GAP9B,yDAAH,sDAYjBsB,IAAcN,EAAAA,EAAAA,QAAO,MAC3B,IAAgCxF,EAAAA,EAAAA,UAAS,IAAzC,iBAAO+F,GAAP,MAAiBC,GAAjB,MACA,IAAwChG,EAAAA,EAAAA,WAAS,GAAjD,iBAAOiG,GAAP,MAAqBC,GAArB,MAWMlB,GAAqB,yCAAG,oHAEhBjG,EAASoH,IAAI5F,EAAAA,EAAO,gBAAY8D,GAAkB,CACpDlD,UAAS,OAAEoE,SAAF,IAAEA,IAAF,UAAEA,GAAca,eAAhB,aAAE,EAAuBC,MAClCjF,YAAW,OAAE0E,SAAF,IAAEA,IAAF,UAAEA,GAAaM,eAAf,aAAE,EAAsBC,MACnCtB,SAAQ,OAAEZ,QAAF,IAAEA,OAAF,EAAEA,EAAcY,SACxB1D,QAAO,OAAE8C,QAAF,IAAEA,OAAF,EAAEA,EAAc9C,QACvBJ,oBAAmB,OAAEkD,QAAF,IAAEA,OAAF,EAAEA,EAAclD,sBAPjB,OAStB9B,IATsB,gDAWtBuB,QAAQC,IAAR,MAC8B,MAA1B,KAAMsE,SAASC,QAAgBV,GAAa,GAZ1B,yDAAH,qDAiB3B,IAAuDxE,EAAAA,EAAAA,WAAS,GAAhE,iBAAOsG,GAAP,MAA+BC,GAA/B,MAEMC,IAAmBrB,EAAAA,EAAAA,cAAW,uBAAC,sGAEzBd,EAFyB,gCAGPtF,EAASuB,IAAIC,EAAAA,EAAO,sBAAkB8D,IAH/B,OAGnB7D,EAHmB,OAIzB0D,EAAU1D,EAAIC,MACd2D,EAAgBT,EAAU8C,MAAK,SAACvF,GAAD,OAAWA,EAAMJ,KAAOuD,CAAxB,KAA2C,CAAC,GALlD,uDAQ7B3D,QAAQC,IAAR,MAC8B,MAA1B,KAAMsE,SAASC,QAAgBV,GAAa,GATnB,yDAWlC,CAACH,EAAgBV,IAepB,OAbA/C,EAAAA,EAAAA,YAAU,WACN4F,IACH,GAAE,CAACA,MAEJ5F,EAAAA,EAAAA,YAAU,WACNwD,EAAgBT,EAAU8C,MAAK,SAACC,GAAD,OAASA,EAAI5F,KAAOuD,CAApB,IAClC,GAAE,CAACA,EAAgBV,KAEpB/C,EAAAA,EAAAA,YAAU,WACN6E,GAAY,OAACtB,QAAD,IAACA,OAAD,EAACA,EAAchD,WAC3B6E,GAAW,OAAC7B,QAAD,IAACA,OAAD,EAACA,EAAc/C,YAC7B,GAAE,CAAC+C,KAGA,iCACI,SAAC,EAAD,CACIlF,OAAQ4E,EACR3E,UAAW4E,EACX3E,gBAAiBA,KAErB,SAACwH,EAAA,EAAD,CACIL,uBAAwBA,GACxBC,qBAAsBA,GACtBlB,QAAShB,EACTlF,gBAAiBA,KAErB,iBAAK6C,UAAU,yBAAf,WAEI,iBAAKA,UAAU,wCAAf,WACI,iBAAKA,UAAU,2BAAf,WACI,gBAAKA,UAAU,oCAAf,UACI,SAAC,KAAD,CACIY,QAASW,EACTZ,SAAUe,EACV1B,UAAU,gBACVe,eAAgB,SAACD,GAAD,OAAYA,EAAOE,SAAnB,EAChBH,eAAgB,SAACC,GAAD,OAAYA,EAAOhC,EAAnB,EAChBwB,YAAY,oBAIpB,iBAAKN,UAAU,oDAAf,WACI,kBACIW,SAAU,SAAC+B,GAAD,OAAOV,EAAcU,EAAEE,OAAOyB,MAA9B,EACVrE,UAAU,yGACVM,YAAY,mBAEhB,SAACgB,EAAA,EAAD,CACItB,UAAU,cACVC,QAAS,WACL6B,GAAmB,EACtB,EAJL,gCAYR,gBAAK9B,UAAU,4DAAf,SACK2B,EACIiD,QAAO,SAACF,GACL,MACmB,KAAf3C,GACA2C,EAAIvF,UAAU0F,cAAcC,SAAS/C,EAAW8C,eAEzCH,EACJ,EACV,IACAK,KAAI,SAACC,EAAMC,GACR,OACI,SAACC,EAAA,EAAD,CACIC,UAAWH,EAEXI,cAAexB,GACftB,kBAAmBA,EACnB+C,WAAS,EACTC,YAAU,GAJLL,EAOhB,UAIb,gBAAKjF,UAAU,iFAAf,SACKqC,GACG,iCAEI,iBAAKrC,UAAU,kDAAf,WACiB,OAAZmC,QAAY,IAAZA,OAAA,EAAAA,EAAchD,aACX,kBACIoG,IAAKhC,GACLiC,MAAe,OAATrG,SAAS,IAATA,QAAA,EAAAA,GAAWkC,SAAU,GAC3BgD,MAAOlF,IAAa,GACpBwB,SAAU,SAAC+B,GAAD,OAAOe,GAAaf,EAAEE,OAAOyB,MAA7B,EACVrE,UAAS,uHACL0D,GAAkB,wCADb,KAKT+B,UAAW/B,MAGnB,cACIzD,QAAS,kBAtKrCsD,GAAaa,QAAQsB,QACrB/B,IAAuBD,SACnBA,IAAoBV,KAoKa,EACThD,UAAU,qHAIlB,iBACIA,UAAS,gJADb,WAGI,gBACI2F,KAAiB,OAAZxD,QAAY,IAAZA,OAAA,EAAAA,EAAcY,WAxPnD,yGAyPgC/C,UAAU,gCACV4F,IAAI,MAER,mBACI5F,UAAU,2KACVG,QAAQ,QAFZ,WAII,kBACIC,KAAK,OACLtB,GAAG,QACHuB,KAAK,QACLwF,OAAO,UACP7F,UAAU,oBACVW,SAAU8B,KAEd,iBAAMzC,UAAU,WAAhB,kCAIK,OAAZmC,QAAY,IAAZA,OAAA,EAAAA,EAAc2D,yBACX,iBAAK9F,UAAU,mCAAf,WACI,iBAAMA,UAAU,qCAAhB,iCAGA,iBAAMA,UAAU,GAAhB,SAAoBmC,EAAa2D,4BAIzC,iBAAK9F,UAAU,sBAAf,WACI,iBAAKA,UAAU,6CAAf,WACI,iBAAMA,UAAU,qCAAhB,iCAGA,iBACIC,QA9LX,WACrB6D,GAAYM,QAAQsB,QACpBxB,IAAiBD,IACbA,IAAcjB,IACrB,EA2LmChD,UAAU,+DAFd,sBAOJ,SAAC+F,EAAA,EAAD,CACIR,IAAKzB,GACLO,MAAON,GACPpD,SAAU,SAAC+B,GAAD,OAAOsB,GAAYtB,EAAEE,OAAOyB,MAA5B,EACVrE,UAAU,eACVyF,UAAWxB,GACX+B,UAAW/B,SAInB,iBAAKjE,UAAU,sBAAf,WACI,iBAAKA,UAAU,6CAAf,WACI,iBAAMA,UAAU,qCAAhB,qBAGA,SAACsB,EAAA,EAAD,CAAQrB,QA7ML,WAC/BsE,IAAqB,EACxB,EA2M+B,6BAIJ,gBAAKvE,UAAU,sBAAf,SACKiC,EAAO8C,KAAI,SAACL,EAAKO,GACd,OACI,SAACgB,EAAA,EAAD,CACIvB,IAAKA,EAGLW,WAAS,GAFJX,EAAI5F,GAAKmG,EAKzB,aAKb,+BACI,iBAAKjF,UAAU,gEAAf,WACI,gBAAK2F,IAAKO,EAAWN,IAAI,GAAG5F,UAAU,eACtC,iBAAMA,UAAU,mCAAhB,wDAOhB,SAACmG,EAAA,EAAD,CAAalJ,OAAQsF,SAIpC,C","sources":["components/Modals/ModalCreateGradeTopic.js","pages/TeacherPages/TeacherTopicPage.js"],"sourcesContent":["import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport Select from 'react-select';\r\n\r\nimport { API_URL, customStyles } from '../../constant';\r\nimport Button from '../Button';\r\nimport { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\nimport { useEffect } from 'react';\r\nconst axiosJWT = createAxiosJWT();\r\n\r\nconst ModalCreateGradeTopic = ({ isOpen, setIsOpen, getTopicOfGrade }) => {\r\n    const {\r\n        register: registerCreateGradeTopic,\r\n        handleSubmit: handleSubmitGradeTopic,\r\n        reset: resetCreate,\r\n        formState: formStateCreate,\r\n        watch,\r\n        control,\r\n    } = useForm();\r\n    let watchGrade = watch('gradeId');\r\n\r\n    const [grades, setGrades] = useState([]);\r\n    const [prerequisiteTopicGrades, setPrerequisiteTopicGrades] = useState([]);\r\n\r\n    const getAllGrades = async () => {\r\n        try {\r\n            const res = await axiosJWT.get(API_URL + `grade/teacher`);\r\n            setGrades(res.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllGrades();\r\n    }, []);\r\n\r\n    const getPrerequisiteTopicOfGrade = async () => {\r\n        // const res = await axiosJWT.get(\r\n        //   API_URL + `topic/teacher/grade/${currentGrade}`,\r\n        // )\r\n        try {\r\n            const res = await axiosJWT.get(API_URL + `topic/teacher/grade/${watchGrade?.id}`);\r\n            setPrerequisiteTopicGrades(res.data);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPrerequisiteTopicOfGrade();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [watchGrade]);\r\n\r\n    const handleCreateGradeTopic = async (data) => {\r\n        try {\r\n            const prerequisiteTopic = data.prerequisiteTopicId?.id\r\n                ? {\r\n                      prerequisiteTopicId: data.prerequisiteTopicId.id,\r\n                  }\r\n                : {};\r\n            const topic = {\r\n                topicName: data.topicName,\r\n                description: data.description,\r\n                gradeId: data.gradeId.id,\r\n                isUnlock: !data.isLock,\r\n                ...prerequisiteTopic,\r\n            };\r\n            await axiosJWT.post(API_URL + `topic`, topic);\r\n            getTopicOfGrade();\r\n            setIsOpen(false);\r\n        } catch (err) {\r\n            console.log(err);\r\n            toast('Create topic failed');\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (formStateCreate.isSubmitSuccessful) {\r\n            resetCreate({\r\n                topicName: '',\r\n                description: '',\r\n                gradeId: -1,\r\n                prerequisiteTopicId: -1,\r\n            });\r\n            setIsOpen(false);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [formStateCreate, resetCreate]);\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            style={customStyles}\r\n            shouldCloseOnOverlayClick={true}\r\n            contentLabel='Example Modal'\r\n            ariaHideApp={false}\r\n        >\r\n            <div className='flex justify-end'>\r\n                <button onClick={() => setIsOpen(false)}>\r\n                    <i className='fas fa-times'></i>\r\n                </button>\r\n            </div>\r\n            <form\r\n                className='flex flex-col w-[500px] '\r\n                onSubmit={handleSubmitGradeTopic(handleCreateGradeTopic)}\r\n            >\r\n                <div className='flex flex-col gap-4'>\r\n                    <div className='flex justify-center'>\r\n                        <h2 className='text-2xl font-semibold'>Create new topic</h2>\r\n                    </div>\r\n                    <div className='flex flex-col gap-2'>\r\n                        <label htmlFor='topicName'>Topic name</label>\r\n                        <input\r\n                            type='text'\r\n                            name='topicName'\r\n                            placeholder='Enter topic name'\r\n                            className='outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                            {...registerCreateGradeTopic('topicName', { required: true })}\r\n                        />\r\n                    </div>\r\n                    <div className='flex flex-col gap-2'>\r\n                        <label htmlFor='description'>Topic description</label>\r\n                        <textarea\r\n                            type='text'\r\n                            name='description'\r\n                            placeholder='Description'\r\n                            className='resize-none outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                            {...registerCreateGradeTopic('description', { required: true })}\r\n                        />\r\n                    </div>\r\n                    <div className='flex flex-row items-center gap-3'>\r\n                        <input\r\n                            id='lockTopicCreate'\r\n                            type='checkbox'\r\n                            {...registerCreateGradeTopic('isLock')}\r\n                        />\r\n                        <label htmlFor='lockTopicCreate' className='select-none cursor-pointer'>\r\n                            Lock topic\r\n                        </label>\r\n                    </div>\r\n                    <div className='flex flex-col gap-2'>\r\n                        <label htmlFor='gradeId'>Grade</label>\r\n                        <Controller\r\n                            name='gradeId'\r\n                            control={control}\r\n                            rules={{ required: true }}\r\n                            render={({ field }) => (\r\n                                <Select\r\n                                    {...field}\r\n                                    onChange={field.onChange}\r\n                                    options={grades}\r\n                                    getOptionValue={(option) => option.id}\r\n                                    getOptionLabel={(option) => option.gradeName}\r\n                                    styles={{\r\n                                        menuList: (base) => ({\r\n                                            ...base,\r\n                                            maxHeight: '100px', // your desired height\r\n                                        }),\r\n                                    }}\r\n                                ></Select>\r\n                            )}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='flex flex-col gap-2'>\r\n                        <label htmlFor='prerequisiteTopicId'>Prerequisite topic</label>\r\n                        {prerequisiteTopicGrades?.length > 0 && (\r\n                            <Controller\r\n                                name='prerequisiteTopicId'\r\n                                control={control}\r\n                                render={({ field }) => (\r\n                                    <Select\r\n                                        {...field}\r\n                                        options={prerequisiteTopicGrades}\r\n                                        getOptionValue={(option) => option.id}\r\n                                        getOptionLabel={(option) => option.topicName}\r\n                                        styles={{\r\n                                            menuList: (base) => ({\r\n                                                ...base,\r\n                                                maxHeight: '160px', // your desired height\r\n                                            }),\r\n                                        }}\r\n                                        // menuPlacement='top'\r\n                                    ></Select>\r\n                                )}\r\n                            ></Controller>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Button className='border-none bg-primary w-full mt-5'>Create</Button>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalCreateGradeTopic;\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport Select from 'react-select';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport nocontent from '../../assets/image/nocontent.png';\r\nimport { API_URL } from '../../constant';\r\n// components\r\nimport Button from '../../components/Button';\r\n// import GrowingInput from '../../components/GrowingInput'\r\nimport TopicCard from '../../components/Student/TopicCard';\r\nimport GrowingTextArea from './GrowingTextArea';\r\nimport TokenExpire from '../../components/Modals/TokenExpire';\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\nimport ModalCreateSkill from '../SkillPages/ModalCreateSkill';\r\n\r\nimport TeacherSkillInTopics from '../../components/Teacher/TeacherSkillInTopics';\r\nimport ModalCreateGradeTopic from '../../components/Modals/ModalCreateGradeTopic';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\n\r\nconst topicImage =\r\n    'https://thumbs.dreamstime.com/b/letter-block-word-topic-wood-background-business-concept-170764857.jpg';\r\n\r\nconst TeacherTopicPage = () => {\r\n    const [gradeListOptions, setGradeListOptions] = useState([]);\r\n    const [selectedGrade, setSelectedGrade] = useState({});\r\n    const [topicList, setTopicList] = useState([]);\r\n    const [openCreateTopic, setOpenCreateTopic] = useState(false);\r\n\r\n    //Search\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    //Topics\r\n    //   const [topics, setTopics] = useState([])\r\n    const [skills, setSkills] = useState([]);\r\n    const [currentTopic, setCurrentTopic] = useState({});\r\n    const [currentTopicId, setCurrentTopicId] = useState();\r\n    const [isExpired, setIsExpired] = useState(false);\r\n\r\n    const handleChangeImage = async (e) => {\r\n        try {\r\n            const res = await axiosJWT.post(\r\n                API_URL + 'file/image',\r\n                {\r\n                    image: e.target.files[0],\r\n                },\r\n                {\r\n                    headers: { 'Content-Type': 'multipart/form-data' },\r\n                }\r\n            );\r\n            currentTopic.topicImg = res.data;\r\n            handleUpdateInfoTopic();\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    };\r\n\r\n    const getTopicOfGrade = useCallback(async () => {\r\n        try {\r\n            if (selectedGrade?.id) {\r\n                const res = await axiosJWT.get(\r\n                    API_URL + `topic/teacher/grade/${selectedGrade?.id}`\r\n                );\r\n                const result = res.data;\r\n                if (result.length > 0 && result[0]?.topicId && !currentTopicId) {\r\n                    setCurrentTopicId(result[0].topicId);\r\n                    setCurrentTopic(result[0]);\r\n                }\r\n                setTopicList(res.data);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    }, [currentTopicId, selectedGrade?.id]);\r\n\r\n    useEffect(() => {\r\n        selectedGrade && getTopicOfGrade();\r\n    }, [selectedGrade, getTopicOfGrade]);\r\n\r\n    useEffect(() => {\r\n        const getAllGradeOfTeacher = async () => {\r\n            const res = await axiosJWT.get(API_URL + `grade/teacher`);\r\n            setGradeListOptions(res.data);\r\n        };\r\n        getAllGradeOfTeacher();\r\n    }, []);\r\n\r\n    //edit Topic Name\r\n    const topicNameRef = useRef(null);\r\n    const [topicName, setTopicName] = useState('');\r\n    const [isEditingTopicName, setIsEditingTopicName] = useState(false);\r\n    const handleEditTopicName = () => {\r\n        topicNameRef.current.focus();\r\n        setIsEditingTopicName(!isEditingTopicName);\r\n        if (isEditingTopicName) handleUpdateInfoTopic();\r\n    };\r\n\r\n    const handleDeleteTopic = async (id) => {\r\n        try {\r\n            await axiosJWT.delete(API_URL + `topic/${id}`);\r\n            setCurrentTopicId(null);\r\n            selectedGrade && getTopicOfGrade();\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    };\r\n\r\n    // topic des\r\n    const topicDesRef = useRef(null);\r\n    const [topicDes, setTopicDes] = useState('');\r\n    const [isEditingDes, setIsEditingDes] = useState(false);\r\n    const handleEditingDes = () => {\r\n        topicDesRef.current.focus();\r\n        setIsEditingDes(!isEditingDes);\r\n        if (isEditingDes) handleUpdateInfoTopic();\r\n    };\r\n\r\n    const handleOpenModalCreateSkill = () => {\r\n        setCreateSkillIsOpen(true);\r\n    };\r\n\r\n    const handleUpdateInfoTopic = async () => {\r\n        try {\r\n            await axiosJWT.put(API_URL + `topic/${currentTopicId}`, {\r\n                topicName: topicNameRef?.current?.value,\r\n                description: topicDesRef?.current?.value,\r\n                topicImg: currentTopic?.topicImg,\r\n                gradeId: currentTopic?.gradeId,\r\n                prerequisiteTopicId: currentTopic?.prerequisiteTopicId,\r\n            });\r\n            getTopicOfGrade();\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    };\r\n\r\n    //Skill\r\n    const [modalCreateSkillIsOpen, setCreateSkillIsOpen] = useState(false);\r\n\r\n    const getSkillsOfTopic = useCallback(async () => {\r\n        try {\r\n            if (currentTopicId) {\r\n                const res = await axiosJWT.get(API_URL + `skill/topic/${currentTopicId}`);\r\n                setSkills(res.data);\r\n                setCurrentTopic(topicList.find((topic) => topic.id === currentTopicId) || {});\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    }, [currentTopicId, topicList]);\r\n\r\n    useEffect(() => {\r\n        getSkillsOfTopic();\r\n    }, [getSkillsOfTopic]);\r\n\r\n    useEffect(() => {\r\n        setCurrentTopic(topicList.find((val) => val.id === currentTopicId));\r\n    }, [currentTopicId, topicList]);\r\n\r\n    useEffect(() => {\r\n        setTopicName(currentTopic?.topicName);\r\n        setTopicDes(currentTopic?.description);\r\n    }, [currentTopic]);\r\n\r\n    return (\r\n        <>\r\n            <ModalCreateGradeTopic\r\n                isOpen={openCreateTopic}\r\n                setIsOpen={setOpenCreateTopic}\r\n                getTopicOfGrade={getTopicOfGrade}\r\n            />\r\n            <ModalCreateSkill\r\n                modalCreateSkillIsOpen={modalCreateSkillIsOpen}\r\n                setCreateSkillIsOpen={setCreateSkillIsOpen}\r\n                topicId={currentTopicId}\r\n                getTopicOfGrade={getTopicOfGrade}\r\n            />\r\n            <div className='flex flex-row h-screen'>\r\n                {/* left */}\r\n                <div className='w-[40%] flex flex-col px-5 py-5 gap-6'>\r\n                    <div className='flex flex-col gap-3 px-4'>\r\n                        <div className='flex flex-row items-center w-full'>\r\n                            <Select\r\n                                options={gradeListOptions}\r\n                                onChange={setSelectedGrade}\r\n                                className='w-full shadow'\r\n                                getOptionLabel={(option) => option.gradeName}\r\n                                getOptionValue={(option) => option.id}\r\n                                placeholder='Select grade'\r\n                            />\r\n                        </div>\r\n                        {/* search */}\r\n                        <div className='flex flex-row justify-between items-center w-full'>\r\n                            <input\r\n                                onChange={(e) => setSearchTerm(e.target.value)}\r\n                                className='outline-none rounded-lg text-base px-4 py-2 w-[65%] drop-shadow-md focus:drop-shadow-lg transition-all'\r\n                                placeholder='Search topics'\r\n                            />\r\n                            <Button\r\n                                className='border-none'\r\n                                onClick={() => {\r\n                                    setOpenCreateTopic(true);\r\n                                }}\r\n                            >\r\n                                Add a Topic\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    {/* filter */}\r\n                    {/* courses */}\r\n                    <div className='flex flex-col gap-7 px-4 pb-4 overflow-auto scroll-smooth'>\r\n                        {topicList\r\n                            .filter((val) => {\r\n                                if (\r\n                                    searchTerm === '' ||\r\n                                    val.topicName.toLowerCase().includes(searchTerm.toLowerCase())\r\n                                )\r\n                                    return val;\r\n                                return '';\r\n                            })\r\n                            .map((item, i) => {\r\n                                return (\r\n                                    <TopicCard\r\n                                        topicInfo={item}\r\n                                        key={i}\r\n                                        onDeleteTopic={handleDeleteTopic}\r\n                                        setCurrentTopicId={setCurrentTopicId}\r\n                                        isTeacher\r\n                                        gradeTopic\r\n                                    />\r\n                                );\r\n                            })}\r\n                    </div>\r\n                </div>\r\n                {/* right */}\r\n                <div className='flex flex-col transition-all gap-5 w-[60%] bg-white py-5 px-10 overflow-y-auto'>\r\n                    {currentTopicId ? (\r\n                        <>\r\n                            {/* Topic tile */}\r\n                            <div className='flex flex-row gap-3 justify-center items-center'>\r\n                                {currentTopic?.topicName && (\r\n                                    <input\r\n                                        ref={topicNameRef}\r\n                                        size={topicName?.length || 10}\r\n                                        value={topicName || ''}\r\n                                        onChange={(e) => setTopicName(e.target.value)}\r\n                                        className={`text-2xl text-center font-medium max-w-[600px] text-primary outline-none px-3 transition-all border-b-2 py-2 ${\r\n                                            isEditingTopicName\r\n                                                ? ` border-primary `\r\n                                                : `border-transparent`\r\n                                        } `}\r\n                                        readOnly={!isEditingTopicName}\r\n                                    />\r\n                                )}\r\n                                <i\r\n                                    onClick={() => handleEditTopicName()}\r\n                                    className='fa-regular fa-pen-to-square mb-1 cursor-pointer text-primary font-medium text-xl select-none active:scale-90'\r\n                                />\r\n                            </div>\r\n                            {/* image */}\r\n                            <div\r\n                                className={`relative rounded-lg min-h-[300px] overflow-hidden flex items-center justify-center bg-center w-full select-none cursor-pointer transition-all`}\r\n                            >\r\n                                <img\r\n                                    src={currentTopic?.topicImg || topicImage}\r\n                                    className='h-[300px] object-cover w-full'\r\n                                    alt=''\r\n                                />\r\n                                <label\r\n                                    className='absolute z-1 w-full text-transparent hover:text-white hover:bg-gray-800 flex justify-center items-center hover:bg-opacity-50 transition-all min-h-[300px] cursor-pointer'\r\n                                    htmlFor='image'\r\n                                >\r\n                                    <input\r\n                                        type='file'\r\n                                        id='image'\r\n                                        name='image'\r\n                                        accept='image/*'\r\n                                        className='w-0 h-0 opacity-0'\r\n                                        onChange={handleChangeImage}\r\n                                    ></input>\r\n                                    <span className='text-2xl'>Click to edit</span>\r\n                                </label>\r\n                            </div>\r\n                            {/*  */}\r\n                            {currentTopic?.prerequisiteTopicName && (\r\n                                <div className='flex flex-col gap-3 items-center'>\r\n                                    <span className='text-2xl font-medium text-gray-700'>\r\n                                        Prerequisite Topic\r\n                                    </span>\r\n                                    <span className=''>{currentTopic.prerequisiteTopicName}</span>\r\n                                </div>\r\n                            )}\r\n                            {/* topic des */}\r\n                            <div className='flex flex-col gap-3'>\r\n                                <div className='flex flex-row justify-between items-center'>\r\n                                    <span className='text-2xl font-medium text-gray-700'>\r\n                                        Topic descriptions\r\n                                    </span>\r\n                                    <span\r\n                                        onClick={handleEditingDes}\r\n                                        className='mr-5 text-primary cursor-pointer active:scale-90 select-none'\r\n                                    >\r\n                                        Edit\r\n                                    </span>\r\n                                </div>\r\n                                <GrowingTextArea\r\n                                    ref={topicDesRef}\r\n                                    value={topicDes}\r\n                                    onChange={(e) => setTopicDes(e.target.value)}\r\n                                    className='text-justify'\r\n                                    readOnly={!isEditingDes}\r\n                                    isEditing={isEditingDes}\r\n                                />\r\n                            </div>\r\n                            {/* skills */}\r\n                            <div className='flex flex-col gap-3'>\r\n                                <div className='flex flex-row justify-between items-center'>\r\n                                    <span className='text-2xl font-medium text-gray-700'>\r\n                                        Skills\r\n                                    </span>\r\n                                    <Button onClick={handleOpenModalCreateSkill}>\r\n                                        Add a skill\r\n                                    </Button>\r\n                                </div>\r\n                                <div className='flex flex-col gap-1'>\r\n                                    {skills.map((val, i) => {\r\n                                        return (\r\n                                            <TeacherSkillInTopics\r\n                                                val={val}\r\n                                                key={val.id + i}\r\n                                                // getTopicOfClass={getTopicOfClass}\r\n                                                isTeacher\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div className='w-full h-full flex flex-col gap-5 items-center justify-center'>\r\n                                <img src={nocontent} alt='' className='h-[300px]' />\r\n                                <span className='text-2xl font-[500] text-primary'>\r\n                                    No content, choose 1 topic to view\r\n                                </span>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <TokenExpire isOpen={isExpired} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TeacherTopicPage;\r\n"],"names":["axiosJWT","createAxiosJWT","isOpen","setIsOpen","getTopicOfGrade","useForm","registerCreateGradeTopic","register","handleSubmitGradeTopic","handleSubmit","resetCreate","reset","formStateCreate","formState","watch","control","watchGrade","useState","grades","setGrades","prerequisiteTopicGrades","setPrerequisiteTopicGrades","getAllGrades","get","API_URL","res","data","console","log","useEffect","getPrerequisiteTopicOfGrade","id","handleCreateGradeTopic","prerequisiteTopic","prerequisiteTopicId","topic","topicName","description","gradeId","isUnlock","isLock","post","toast","isSubmitSuccessful","style","customStyles","shouldCloseOnOverlayClick","contentLabel","ariaHideApp","className","onClick","onSubmit","htmlFor","type","name","placeholder","required","rules","render","field","onChange","options","getOptionValue","option","getOptionLabel","gradeName","styles","menuList","base","maxHeight","length","Button","gradeListOptions","setGradeListOptions","selectedGrade","setSelectedGrade","topicList","setTopicList","openCreateTopic","setOpenCreateTopic","searchTerm","setSearchTerm","skills","setSkills","currentTopic","setCurrentTopic","currentTopicId","setCurrentTopicId","isExpired","setIsExpired","handleChangeImage","e","image","target","files","headers","topicImg","handleUpdateInfoTopic","response","status","useCallback","result","topicId","getAllGradeOfTeacher","topicNameRef","useRef","setTopicName","isEditingTopicName","setIsEditingTopicName","handleDeleteTopic","delete","topicDesRef","topicDes","setTopicDes","isEditingDes","setIsEditingDes","put","current","value","modalCreateSkillIsOpen","setCreateSkillIsOpen","getSkillsOfTopic","find","val","ModalCreateSkill","filter","toLowerCase","includes","map","item","i","TopicCard","topicInfo","onDeleteTopic","isTeacher","gradeTopic","ref","size","readOnly","focus","src","alt","accept","prerequisiteTopicName","GrowingTextArea","isEditing","TeacherSkillInTopics","nocontent","TokenExpire"],"sourceRoot":""}