{"version":3,"file":"static/js/377.0f4415f5.chunk.js","mappings":"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","sources":["components/Button.js","components/Modals/ConfirmModal.js","createAxiosJWT.js","components/Modals/Admin/ManageGradeModal.js","components/Admin/ManageGrade.js","components/Modals/Admin/ManageQuestionTypeModal.js","components/Admin/ManageQuestionType.js","components/Modals/Admin/ManageRoleModal.js","components/Admin/ManageRole.js","components/Modals/Admin/ManageStandardModal.js","components/Admin/ManageStandard.js","pages/AdminPages/ManageSystem.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({ children, className = '', ...rest }) => {\r\n    return (\r\n        <button\r\n            className={`bg-primary py-2 px-5 rounded-lg border-2 text-white transition-all active:scale-90 cursor-pointer select-none hover:bg-opacity-90 text-center border-none ${className} `}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react'\r\nimport Modal from 'react-modal'\r\nimport Button from '../Button'\r\n\r\nconst ConfirmModal = ({ isOpen, message, yesConfirm, noConfirm }) => {\r\n  const customStyles = {\r\n    overlay: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(165, 165, 165, 0.6)',\r\n    },\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      marginRight: '-50%',\r\n      transform: 'translate(-50%, -50%)',\r\n      border: 'none',\r\n      borderRadius: '8px',\r\n    },\r\n  }\r\n\r\n  const handleNoConfirm = () => {\r\n    noConfirm()\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      style={customStyles}\r\n      shouldCloseOnOverlayClick={true}\r\n      contentLabel=\"Example Modal\"\r\n      ariaHideApp={false}\r\n    >\r\n      <div className=\"flex flex-col gap-4 w-[500px]\">\r\n        <span className=\"text-2xl font-medium\">Confirm</span>\r\n        <span>{message}</span>\r\n      </div>\r\n      <div className=\"flex flex-row-reverse mt-5 gap-5\">\r\n        <Button onClick={yesConfirm}>Yes</Button>\r\n        <Button onClick={handleNoConfirm}>No</Button>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ConfirmModal\r\n","import axios from 'axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { API_URL } from './constant'\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem('refresh_token')\r\n    const res = await axios.post(\r\n      API_URL + `account/refresh-token`,\r\n      {},\r\n      {\r\n        headers: { Authorization: `Bearer ${refreshToken}` },\r\n      },\r\n    )\r\n    return res.data\r\n  } catch (err) {\r\n    // return navigation('/');\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nconst createAxiosJWT = () => {\r\n  const newInstance = axios.create()\r\n  newInstance.interceptors.request.use(\r\n    async (config) => {\r\n      const accessToken = localStorage.getItem('access_token')\r\n      if (accessToken) {\r\n        const decodedToken = jwt_decode(accessToken)\r\n        try {\r\n          if (decodedToken.exp < Date.now() / 1000) {\r\n            const tokens = await refreshToken()\r\n            localStorage.setItem('access_token', tokens.accessToken)\r\n            localStorage.setItem('refresh_token', tokens.refreshToken)\r\n            config.headers['Authorization'] = 'Bearer ' + tokens.accessToken\r\n          } else config.headers['Authorization'] = 'Bearer ' + accessToken\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      }\r\n      return config\r\n    },\r\n    (err) => {\r\n      console.log(err)\r\n      const navigate = useNavigate()\r\n      navigate('/')\r\n      // return Promise.reject(err);\r\n    },\r\n  )\r\n  return newInstance\r\n}\r\n\r\nexport default createAxiosJWT\r\n","import React from 'react';\r\nimport { customStyles } from '../../../constant';\r\nimport Modal from 'react-modal';\r\nimport { useForm } from 'react-hook-form';\r\nimport Button from '../../Button';\r\nimport { API_URL } from '../../../constant';\r\nimport createAxiosJWT from '../../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst ManageGradeModal = ({ isOpen, setIsOpen, getAllGrades }) => {\r\n    const { register: registerGrade, handleSubmit: createGrade } = useForm();\r\n\r\n    const handleCloseModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const createNewGrade = async (data) => {\r\n        try {\r\n            await axiosJWT.post(API_URL + `grade`, { ...data });\r\n            getAllGrades();\r\n            setIsOpen(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            style={customStyles}\r\n            isOpen={isOpen}\r\n            ariaHideApp={false}\r\n            shouldCloseOnOverlayClick={true}\r\n        >\r\n            <form className='flex flex-col gap-5 w-[500px]' onSubmit={createGrade(createNewGrade)}>\r\n                <span className='text-2xl font-[500]'>Create new grade</span>\r\n                <div className='flex flex-col gap-2 px-2 w-full'>\r\n                    <span className='px-2'>Grade</span>\r\n                    <input\r\n                        type='text'\r\n                        {...registerGrade('gradeName', { required: true })}\r\n                        placeholder='Type in grade name'\r\n                        className='outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                    />\r\n                </div>\r\n                <div className='flex flex-row items-center justify-end gap-5'>\r\n                    <Button type='submit'>Create</Button>\r\n                    <Button onClick={handleCloseModal}>Cancel</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ManageGradeModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '../Button';\r\nimport ManageGradeModal from '../Modals/Admin/ManageGradeModal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport ConfirmModal from '../Modals/ConfirmModal';\r\nimport { API_URL } from '../../constant';\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\n\r\nconst ManageGrade = () => {\r\n    const [createModal, setCreateModal] = useState(false);\r\n    const [confirmDelete, setConfirmDelete] = useState(false);\r\n    const [grades, setGrades] = useState([]);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n    //\r\n    const endOffset = itemOffset + 4;\r\n    const currentItems = grades.slice(itemOffset, endOffset);\r\n    const pageCount = Math.ceil(grades.length / 4);\r\n    const handlePageClick = (event) => {\r\n        const newOffset = (event.selected * 4) % grades.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    const getAllGrades = async () => {\r\n        try {\r\n            const res = await axiosJWT.get(API_URL + `grade`);\r\n            setGrades(res.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await axiosJWT.delete(API_URL + `grade/${id}`);\r\n            getAllGrades();\r\n            setConfirmDelete(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllGrades();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <ManageGradeModal\r\n                isOpen={createModal}\r\n                setIsOpen={setCreateModal}\r\n                getAllGrades={getAllGrades}\r\n            />\r\n            <div className='flex flex-col gap-4 w-[750px] h-fit bg-white shadow px-3 py-3 rounded-lg'>\r\n                <div className='flex flex-row items-center justify-between'>\r\n                    <span className='font-[500] text-gray-600'>Grade</span>\r\n                    <Button onClick={() => setCreateModal(true)} className='text-xs'>\r\n                        Add new type\r\n                    </Button>\r\n                </div>\r\n                <div className='overflow-x-auto h-[256px] relative shadow-md sm:rounded-lg'>\r\n                    <table className='w-full text-sm  text-left text-gray-500 dark:text-gray-400'>\r\n                        <thead className=' text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400'>\r\n                            <tr>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Id\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Grade name\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {currentItems.map((val, index) => {\r\n                                return (\r\n                                    <tr\r\n                                        key={val?.id + index}\r\n                                        className='bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600'\r\n                                    >\r\n                                        <th scope='row' className='py-4 px-6'>\r\n                                            {val?.id}\r\n                                        </th>\r\n                                        <th className='py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white'>\r\n                                            {val?.gradeName}\r\n                                        </th>\r\n                                        <td className='py-4 px-6 text-right'>\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setConfirmDelete(true);\r\n                                                }}\r\n                                                className='font-medium text-red-500 hover:cursor-pointer hover:underline'\r\n                                            >\r\n                                                Remove\r\n                                            </span>\r\n                                            <ConfirmModal\r\n                                                isOpen={confirmDelete}\r\n                                                message='Are you sure to delete this grade ?'\r\n                                                yesConfirm={() => {\r\n                                                    handleDelete(val?.id);\r\n                                                }}\r\n                                                noConfirm={() => setConfirmDelete(false)}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                {pageCount > 1 && (\r\n                    <ReactPaginate\r\n                        breakLabel='...'\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={5}\r\n                        pageCount={pageCount}\r\n                        renderOnZeroPageCount={null}\r\n                        nextLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                Next <i className='fas fa-angle-right text-xs'></i>\r\n                            </button>\r\n                        }\r\n                        previousLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                <i className='fas fa-angle-left text-xs'></i> Previous\r\n                            </button>\r\n                        }\r\n                        className='flex flex-row gap-5 items-center justify-center select-none'\r\n                        activeClassName='bg-primary text-white flex justify-center items-center w-[40px] h-[40px] rounded-full shadow-lg'\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageGrade;\r\n","import React from 'react';\r\nimport { customStyles } from '../../../constant';\r\nimport Modal from 'react-modal';\r\nimport { useForm } from 'react-hook-form';\r\nimport Button from '../../Button';\r\nimport { API_URL } from '../../../constant';\r\nimport createAxiosJWT from '../../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst ManageQuestionTypeModal = ({ isOpen, setIsOpen, getAllQuestionTypes }) => {\r\n    const { register: registerQType, handleSubmit: createQType } = useForm();\r\n\r\n    const handleCloseModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const createNewQType = async (data) => {\r\n        try {\r\n            await axiosJWT.post(API_URL + `question-type`, { ...data });\r\n            getAllQuestionTypes();\r\n            setIsOpen(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            style={customStyles}\r\n            isOpen={isOpen}\r\n            ariaHideApp={false}\r\n            shouldCloseOnOverlayClick={true}\r\n        >\r\n            <form className='flex flex-col gap-5 w-[500px]' onSubmit={createQType(createNewQType)}>\r\n                <span className='text-2xl font-[500]'>Create question type</span>\r\n                <div className='flex flex-col gap-2 px-2 w-full'>\r\n                    <span className='px-2'>Question type</span>\r\n                    <input\r\n                        type='text'\r\n                        {...registerQType('typeName', { required: true })}\r\n                        placeholder='Type in type name'\r\n                        className='outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                    />\r\n                </div>\r\n                <div className='flex flex-row items-center justify-end gap-5'>\r\n                    <Button type='submit'>Create</Button>\r\n                    <Button onClick={handleCloseModal}>Cancel</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ManageQuestionTypeModal;\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '../Button';\r\nimport ManageQuestionTypeModal from '../Modals/Admin/ManageQuestionTypeModal';\r\nimport ConfirmModal from '../Modals/ConfirmModal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { API_URL } from '../../constant';\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst ManageQuestionType = () => {\r\n    const [createModal, setCreateModal] = useState(false);\r\n    const [confirmDelete, setConfirmDelete] = useState(false);\r\n    const [questionTypes, setQuestionTypes] = useState([]);\r\n\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n    const endOffset = itemOffset + 4;\r\n    const currentItems = questionTypes.slice(itemOffset, endOffset);\r\n    const pageCount = Math.ceil(questionTypes.length / 4);\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = (event.selected * 4) % questionTypes.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    const getAllQuestionTypes = async () => {\r\n        try {\r\n            const res = await axiosJWT.get(API_URL + `question-type`);\r\n            setQuestionTypes(res.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await axiosJWT.delete(API_URL + `question-type/${id}`);\r\n            getAllQuestionTypes();\r\n            setConfirmDelete(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllQuestionTypes();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <ManageQuestionTypeModal\r\n                isOpen={createModal}\r\n                setIsOpen={setCreateModal}\r\n                getAllQuestionTypes={getAllQuestionTypes}\r\n            />\r\n            <div className='flex flex-col gap-4 w-fit h-fit bg-white shadow px-3 py-3 rounded-lg'>\r\n                <div className='flex flex-row items-center justify-between'>\r\n                    <span className='font-[500] text-gray-600'>Question type</span>\r\n                    <Button onClick={() => setCreateModal(true)} className='text-xs'>\r\n                        Add new type\r\n                    </Button>\r\n                </div>\r\n                <div className='overflow-x-auto h-[256px] relative shadow-md sm:rounded-lg'>\r\n                    <table className='w-full text-sm text-left text-gray-500 dark:text-gray-400'>\r\n                        <thead className=' text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400'>\r\n                            <tr>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Id\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Type\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {currentItems.map((val, index) => {\r\n                                return (\r\n                                    <tr\r\n                                        key={val?.id + index}\r\n                                        className='bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600'\r\n                                    >\r\n                                        <th scope='row' className='py-4 px-6'>\r\n                                            {val?.id}\r\n                                        </th>\r\n                                        <th className='py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white'>\r\n                                            {val?.typeName}\r\n                                        </th>\r\n                                        <td className='py-4 px-6 text-right'>\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setConfirmDelete(true);\r\n                                                }}\r\n                                                className='font-medium text-red-500 hover:cursor-pointer hover:underline'\r\n                                            >\r\n                                                Remove\r\n                                            </span>\r\n                                            <ConfirmModal\r\n                                                isOpen={confirmDelete}\r\n                                                message='Are you sure to delete this question type ?'\r\n                                                yesConfirm={() => {\r\n                                                    handleDelete(val?.id);\r\n                                                }}\r\n                                                noConfirm={() => setConfirmDelete(false)}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {pageCount > 1 && (\r\n                    <ReactPaginate\r\n                        breakLabel='...'\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={5}\r\n                        pageCount={pageCount}\r\n                        renderOnZeroPageCount={null}\r\n                        nextLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                Next <i className='fas fa-angle-right text-xs'></i>\r\n                            </button>\r\n                        }\r\n                        previousLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                <i className='fas fa-angle-left text-xs'></i> Previous\r\n                            </button>\r\n                        }\r\n                        className='flex flex-row gap-5 items-center justify-center select-none'\r\n                        activeClassName='bg-primary text-white flex justify-center items-center w-[40px] h-[40px] rounded-full shadow-lg'\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageQuestionType;\r\n","import React from 'react';\r\nimport { customStyles } from '../../../constant';\r\nimport Modal from 'react-modal';\r\nimport { useForm } from 'react-hook-form';\r\nimport Button from '../../Button';\r\nimport { API_URL } from '../../../constant';\r\nimport createAxiosJWT from '../../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst ManageRoleModal = ({ isOpen, setIsOpen, getAllRoles }) => {\r\n    const { register: registerRole, handleSubmit: createRole } = useForm();\r\n\r\n    const handleCloseModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const createNewRole = async (data) => {\r\n        try {\r\n            await axiosJWT.post(API_URL + `role`, { ...data });\r\n            getAllRoles();\r\n            setIsOpen(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            style={customStyles}\r\n            isOpen={isOpen}\r\n            ariaHideApp={false}\r\n            shouldCloseOnOverlayClick={true}\r\n        >\r\n            <form className='flex flex-col gap-5 w-[500px]' onSubmit={createRole(createNewRole)}>\r\n                <span className='text-2xl font-[500]'>Create new role</span>\r\n                <div className='flex flex-col gap-2 px-2 w-full'>\r\n                    <span className='px-2'>Role</span>\r\n                    <input\r\n                        type='text'\r\n                        {...registerRole('role', { required: true })}\r\n                        placeholder='Type in role name'\r\n                        className='outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                    />\r\n                </div>\r\n                <div className='flex flex-row items-center justify-end gap-5'>\r\n                    <Button type='submit'>Create</Button>\r\n                    <Button onClick={handleCloseModal}>Cancel</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ManageRoleModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '../Button';\r\nimport ManageRoleModal from '../Modals/Admin/ManageRoleModal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport ConfirmModal from '../Modals/ConfirmModal';\r\nimport { API_URL } from '../../constant';\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\n\r\nconst ManageRole = () => {\r\n    const [createModal, setCreateModal] = useState(false);\r\n    const [confirmDelete, setConfirmDelete] = useState(false);\r\n    const [roles, setRoles] = useState([]);\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n    const [endOffset, setEndOffset] = useState(itemOffset + 4);\r\n    \r\n    const pageCount = Math.ceil(roles.length / 4);\r\n\r\n    const handlePageClick = (event) => {\r\n        const newOffset = (event.selected * 4) % roles.length;\r\n        setItemOffset(newOffset);\r\n        setEndOffset(newOffset + 4);\r\n    };\r\n\r\n    const getAllRoles = async () => {\r\n        try {\r\n            const res = await axiosJWT.get(API_URL + `role`);\r\n            setRoles(res.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await axiosJWT.delete(API_URL + `role/${id}`);\r\n            getAllRoles();\r\n            setConfirmDelete(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllRoles();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentItems(roles.slice(itemOffset, endOffset));\r\n    }, [roles, itemOffset, endOffset]);\r\n\r\n    return (\r\n        <>\r\n            <ManageRoleModal\r\n                isOpen={createModal}\r\n                setIsOpen={setCreateModal}\r\n                getAllRoles={getAllRoles}\r\n            />\r\n            <div className='flex flex-col gap-4 w-fit h-fit bg-white shadow px-3 py-3 rounded-lg'>\r\n                <div className='flex flex-row items-center justify-between'>\r\n                    <span className='font-[500] text-gray-600'>Manage Role</span>\r\n                    <Button onClick={() => setCreateModal(true)} className='text-xs'>\r\n                        Add new role\r\n                    </Button>\r\n                </div>\r\n                <div className='overflow-x-auto h-[256px] relative shadow-md sm:rounded-lg'>\r\n                    <table className='w-full text-sm text-left text-gray-500 dark:text-gray-400'>\r\n                        <thead className=' text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400'>\r\n                            <tr>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Id\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Role\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {currentItems?.map((val, index) => {\r\n                                return (\r\n                                    <tr\r\n                                        key={val?.id + index}\r\n                                        className='bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600'\r\n                                    >\r\n                                        <th scope='row' className='py-4 px-6'>\r\n                                            {val?.id}\r\n                                        </th>\r\n                                        <th className='py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white'>\r\n                                            {val?.role}\r\n                                        </th>\r\n                                        <td className='py-4 px-6 text-right'>\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setConfirmDelete(true);\r\n                                                }}\r\n                                                className='font-medium text-red-500 hover:cursor-pointer hover:underline'\r\n                                            >\r\n                                                Remove\r\n                                            </span>\r\n                                            <ConfirmModal\r\n                                                isOpen={confirmDelete}\r\n                                                message='Are you sure to delete this role ?'\r\n                                                yesConfirm={() => {\r\n                                                    handleDelete(val?.id);\r\n                                                }}\r\n                                                noConfirm={() => setConfirmDelete(false)}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                {pageCount > 1 && (\r\n                    <ReactPaginate\r\n                        breakLabel='...'\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={5}\r\n                        pageCount={pageCount}\r\n                        renderOnZeroPageCount={null}\r\n                        nextLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                Next <i className='fas fa-angle-right text-xs'></i>\r\n                            </button>\r\n                        }\r\n                        previousLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                <i className='fas fa-angle-left text-xs'></i> Previous\r\n                            </button>\r\n                        }\r\n                        className='flex flex-row gap-5 items-center justify-center select-none'\r\n                        activeClassName='bg-primary text-white flex justify-center items-center w-[40px] h-[40px] rounded-full shadow-lg'\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageRole;\r\n","import React from 'react';\r\nimport { customStyles } from '../../../constant';\r\nimport Modal from 'react-modal';\r\nimport { useForm } from 'react-hook-form';\r\nimport Button from '../../Button';\r\nimport { API_URL } from '../../../constant';\r\nimport createAxiosJWT from '../../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst ManageStandardModal = ({ isOpen, setIsOpen, getAllStandards }) => {\r\n    const { register: registerStandard, handleSubmit: createStandard } = useForm();\r\n    const handleCloseModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const createNewStandard = async (data) => {\r\n        try {\r\n            await axiosJWT.post(API_URL + `standard`, { ...data });\r\n            getAllStandards();\r\n            setIsOpen(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    return (\r\n        <Modal\r\n            style={customStyles}\r\n            isOpen={isOpen}\r\n            ariaHideApp={false}\r\n            shouldCloseOnOverlayClick={true}\r\n        >\r\n            <form\r\n                className='flex flex-col gap-5 w-[500px]'\r\n                onSubmit={createStandard(createNewStandard)}\r\n            >\r\n                <span className='text-2xl font-[500]'>Create standard</span>\r\n                <div className='flex flex-col gap-2 px-2 w-full'>\r\n                    <span className='px-2'>Standard name</span>\r\n                    <input\r\n                        type='text'\r\n                        {...registerStandard('standardName', { required: true })}\r\n                        placeholder='Type in standard name'\r\n                        className='outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                    />\r\n                </div>\r\n                <div className='flex flex-col gap-2 px-2 w-full'>\r\n                    <span className='px-2'>Standard code</span>\r\n                    <input\r\n                        type='text'\r\n                        {...registerStandard('standardCode', { required: true })}\r\n                        placeholder='Type in standard code'\r\n                        className='outline-none px-3 py-1 border-b-2  border-opacity-0 transition-all focus:border-primary'\r\n                    />\r\n                </div>\r\n                <div className='flex flex-row items-center justify-end gap-5'>\r\n                    <Button type='submit'>Create</Button>\r\n                    <Button onClick={handleCloseModal}>Cancel</Button>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ManageStandardModal;\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '../Button';\r\nimport ManageStandardModal from '../Modals/Admin/ManageStandardModal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport ConfirmModal from '../Modals/ConfirmModal';\r\nimport { API_URL } from '../../constant';\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst ManageStandard = () => {\r\n    const [createModal, setCreateModal] = useState(false);\r\n    const [confirmDelete, setConfirmDelete] = useState(false);\r\n    const [standards, setStandards] = useState([]);\r\n\r\n    //\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n    const endOffset = itemOffset + 4;\r\n    const currentItems = standards.slice(itemOffset, endOffset);\r\n    const pageCount = Math.ceil(standards.length / 4);\r\n    const handlePageClick = (event) => {\r\n        const newOffset = (event.selected * 4) % standards.length;\r\n        setItemOffset(newOffset);\r\n    };\r\n\r\n    const getAllStandards = async () => {\r\n        try {\r\n            const res = await axiosJWT.get(API_URL + `standard`);\r\n            setStandards(res.data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await axiosJWT.delete(API_URL + `standard/${id}`);\r\n            getAllStandards();\r\n            setConfirmDelete(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllStandards();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <ManageStandardModal\r\n                isOpen={createModal}\r\n                setIsOpen={setCreateModal}\r\n                getAllStandards={getAllStandards}\r\n            />\r\n            <div className='flex flex-col gap-4 w-[750px] h-fit bg-white shadow px-3 py-3 rounded-lg'>\r\n                <div className='flex flex-row items-center justify-between'>\r\n                    <span className='font-[500] text-gray-600'>Standard</span>\r\n                    <Button onClick={() => setCreateModal(true)} className='text-xs'>\r\n                        Add new standard\r\n                    </Button>\r\n                </div>\r\n                <div className='overflow-x-auto h-[256px] relative shadow-md sm:rounded-lg'>\r\n                    <table className='w-full text-sm text-left text-gray-500 dark:text-gray-400'>\r\n                        <thead className=' text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400'>\r\n                            <tr>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Id\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Standard Name\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'>\r\n                                    Standard Code\r\n                                </th>\r\n                                <th scope='col' className='py-3 px-6'></th>\r\n                            </tr>\r\n                        </thead>\r\n                        {currentItems.map((val, index) => {\r\n                            return (\r\n                                <tbody key={val?.id + index}>\r\n                                    <tr className='bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600'>\r\n                                        <th scope='row' className='py-4 px-6'>\r\n                                            {val?.id}\r\n                                        </th>\r\n                                        <th className='py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white'>\r\n                                            {val?.standardName}\r\n                                        </th>\r\n                                        <th className='py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white'>\r\n                                            {val?.standardCode}\r\n                                        </th>\r\n                                        <td className='py-4 px-6 text-right'>\r\n                                            <span\r\n                                                onClick={() => {\r\n                                                    setConfirmDelete(true);\r\n                                                }}\r\n                                                className='font-medium text-red-500 hover:cursor-pointer hover:underline'\r\n                                            >\r\n                                                Remove\r\n                                            </span>\r\n\r\n                                            <ConfirmModal\r\n                                                isOpen={confirmDelete}\r\n                                                message='Are you sure to delete this standard ?'\r\n                                                yesConfirm={() => {\r\n                                                    handleDelete(val?.id);\r\n                                                }}\r\n                                                noConfirm={() => setConfirmDelete(false)}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            );\r\n                        })}\r\n                    </table>\r\n                </div>\r\n                {pageCount > 1 && (\r\n                    <ReactPaginate\r\n                        breakLabel='...'\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={5}\r\n                        pageCount={pageCount}\r\n                        renderOnZeroPageCount={null}\r\n                        nextLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                Next <i className='fas fa-angle-right text-xs'></i>\r\n                            </button>\r\n                        }\r\n                        previousLabel={\r\n                            <button className='flex flex-row items-center gap-3'>\r\n                                <i className='fas fa-angle-left text-xs'></i> Previous\r\n                            </button>\r\n                        }\r\n                        className='flex flex-row gap-5 items-center justify-center select-none'\r\n                        activeClassName='bg-primary text-white flex justify-center items-center w-[40px] h-[40px] rounded-full shadow-lg'\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageStandard;\r\n","import React from 'react'\r\nimport ManageGrade from '../../components/Admin/ManageGrade'\r\nimport ManageQuestionType from '../../components/Admin/ManageQuestionType'\r\nimport ManageRole from '../../components/Admin/ManageRole'\r\nimport ManageStandard from '../../components/Admin/ManageStandard'\r\n\r\nconst ManageSystem = () => {\r\n  return (\r\n    <div className=\"px-10 py-7 flex flex-col gap-5\">\r\n      <span className=\"text-2xl font-[500] text-gray-600\">Manage System</span>\r\n      <div className=\"flex flex-wrap gap-10\">\r\n        {/* Question type */}\r\n        <ManageRole />\r\n        <ManageStandard />\r\n        <ManageQuestionType />\r\n        <ManageGrade />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManageSystem\r\n"],"names":["children","className","rest","isOpen","message","yesConfirm","noConfirm","style","overlay","position","top","left","right","bottom","backgroundColor","content","marginRight","transform","border","borderRadius","shouldCloseOnOverlayClick","contentLabel","ariaHideApp","onClick","refreshToken","localStorage","getItem","axios","API_URL","headers","Authorization","res","data","console","log","newInstance","interceptors","request","use","config","accessToken","decodedToken","jwt_decode","exp","Date","now","tokens","setItem","err","useNavigate","navigate","axiosJWT","createAxiosJWT","setIsOpen","getAllGrades","useForm","registerGrade","register","createGrade","handleSubmit","createNewGrade","post","customStyles","onSubmit","type","required","placeholder","Button","useState","createModal","setCreateModal","confirmDelete","setConfirmDelete","grades","setGrades","itemOffset","setItemOffset","endOffset","currentItems","slice","pageCount","Math","ceil","length","get","handleDelete","id","delete","useEffect","scope","map","val","index","gradeName","ConfirmModal","breakLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","renderOnZeroPageCount","nextLabel","previousLabel","activeClassName","getAllQuestionTypes","registerQType","createQType","createNewQType","questionTypes","setQuestionTypes","typeName","getAllRoles","registerRole","createRole","createNewRole","roles","setRoles","setCurrentItems","setEndOffset","role","getAllStandards","registerStandard","createStandard","createNewStandard","standards","setStandards","standardName","standardCode"],"sourceRoot":""}