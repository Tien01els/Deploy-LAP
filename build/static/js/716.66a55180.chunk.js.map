{"version":3,"file":"static/js/716.66a55180.chunk.js","mappings":"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","sources":["createAxiosJWT.js","components/Student/Result.js","pages/AssignmentResult.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import axios from 'axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { API_URL } from './constant'\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem('refresh_token')\r\n    const res = await axios.post(\r\n      API_URL + `account/refresh-token`,\r\n      {},\r\n      {\r\n        headers: { Authorization: `Bearer ${refreshToken}` },\r\n      },\r\n    )\r\n    return res.data\r\n  } catch (err) {\r\n    // return navigation('/');\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nconst createAxiosJWT = () => {\r\n  const newInstance = axios.create()\r\n  newInstance.interceptors.request.use(\r\n    async (config) => {\r\n      const accessToken = localStorage.getItem('access_token')\r\n      if (accessToken) {\r\n        const decodedToken = jwt_decode(accessToken)\r\n        try {\r\n          if (decodedToken.exp < Date.now() / 1000) {\r\n            const tokens = await refreshToken()\r\n            localStorage.setItem('access_token', tokens.accessToken)\r\n            localStorage.setItem('refresh_token', tokens.refreshToken)\r\n            config.headers['Authorization'] = 'Bearer ' + tokens.accessToken\r\n          } else config.headers['Authorization'] = 'Bearer ' + accessToken\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      }\r\n      return config\r\n    },\r\n    (err) => {\r\n      console.log(err)\r\n      const navigate = useNavigate()\r\n      navigate('/')\r\n      // return Promise.reject(err);\r\n    },\r\n  )\r\n  return newInstance\r\n}\r\n\r\nexport default createAxiosJWT\r\n","import React from 'react'\r\nimport 'mathlive'\r\nimport { useEffect } from 'react'\r\n\r\nconst Result = ({\r\n  questionOfRespondent,\r\n  index,\r\n  getCorrectAnswerOfQuestion,\r\n  listQuestionOfAssignment,\r\n  checkAnswered,\r\n}) => {\r\n  useEffect(() => {\r\n    const mf = document.querySelector(`#formula-${index}`)\r\n    mf.setValue(\r\n      String.raw`\\begin{multline}\r\n  ` +\r\n        questionOfRespondent?.content +\r\n        String.raw`\r\n  \\end{multline}`,\r\n    )\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [questionOfRespondent?.content])\r\n\r\n  console.log(questionOfRespondent)\r\n\r\n  return (\r\n    <div className=\"flex flex-row gap-5 w-full bg-white rounded-lg shadow px-3 py-3\">\r\n      <div className=\"w-[80px] h-[80px] flex items-center justify-center bg-primary rounded-lg select-none\">\r\n        <span className=\"text-white text-xl font-semibold\">{index + 1}</span>\r\n      </div>\r\n      <div className=\"flex flex-col gap-3 w-[80%]\">\r\n        <div className=\"flex flex-row  justify-between\">\r\n          <div className=\"flex flex-col gap-3 w-[90%]\">\r\n            <math-field\r\n              id={`formula-${index}`}\r\n              style={{\r\n                whiteSpace: 'initial',\r\n                fontSize: '20px',\r\n                outline: 'none',\r\n                userSelect: 'none',\r\n                width: '100%',\r\n                maxHeight: '150px',\r\n                overflowWrap: 'break-word',\r\n                fontFamily: 'Poppins',\r\n              }}\r\n              readonly\r\n            ></math-field>\r\n            <span>\r\n              Correct Answer:{' '}\r\n              {getCorrectAnswerOfQuestion(\r\n                listQuestionOfAssignment.find(\r\n                  (questionOfAssignment) =>\r\n                    questionOfAssignment.questionId ===\r\n                    questionOfRespondent.questionId,\r\n                ),\r\n              )}\r\n            </span>\r\n          </div>\r\n          <span className=\"text-sm text-gray-400 pt-1\">\r\n            {questionOfRespondent.score}pt\r\n          </span>\r\n        </div>\r\n        <div className=\"text-sm flex flex-row items-center gap-5\">\r\n          <div className=\"bg-[#dcedfd] w-[480px] flex justify-between px-3 py-5 rounded-lg\">\r\n            <span className=\"max-w-[430px] break-words whitespace-normal\">\r\n              Your Answer: {checkAnswered(questionOfRespondent)}\r\n            </span>\r\n          </div>\r\n          {/* sai nao thi lay do */}\r\n          <div>\r\n            {questionOfRespondent?.answerOfRespondent?.isCorrect ? (\r\n              <i className=\"fa-solid fa-circle-check text-xl text-green-400\"></i>\r\n            ) : (\r\n              <i className=\"fa-solid fa-circle-xmark text-xl text-red-500\"></i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Result\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { API_URL } from '../constant';\r\nimport createAxiosJWT from '../createAxiosJWT';\r\nimport Result from '../components/Student/Result';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst AssignmentResult = ({ isTeacher, isParent }) => {\r\n    const { assignmentId } = useParams();\r\n    const [listQuestionOfRespondent, setListQuestionOfRespondent] = useState([]);\r\n    const [listQuestionOfAssignment, setListQuestionOfAssignment] = useState([]);\r\n    const [assignment, setAssignment] = useState({});\r\n    const [numberOfCorrectAnswers, setNumberOfCorrectAnswers] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [studentInfo, setStudentInfo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (isParent) {\r\n            const getStudentInfo = async () => {\r\n                try {\r\n                    const res = await axiosJWT.get(API_URL + 'parent/student');\r\n                    setStudentInfo(res.data);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            };\r\n            getStudentInfo();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const executeScroll = (id) => {\r\n        let elementId = `question-${id}`;\r\n        document.getElementById(elementId).scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    const checkAnswered = (questionOfAssignment) => {\r\n        const questionType = ['', 'multiChoice', 'trueFalse', 'input', 'multiSelect'];\r\n        const answerOfRespondent = questionOfAssignment?.answerOfRespondent?.answer;\r\n        const typeOfquestion =\r\n            questionOfAssignment?.questionTypeId &&\r\n            questionType[questionOfAssignment?.questionTypeId];\r\n        if (answerOfRespondent && typeOfquestion && answerOfRespondent[typeOfquestion]) {\r\n            const resultOfRespondent = answerOfRespondent[typeOfquestion];\r\n            if (typeOfquestion === 'multiChoice')\r\n                for (let i = 0; i < resultOfRespondent.length; i++)\r\n                    if (resultOfRespondent[i].isTrue) return resultOfRespondent[i].answer;\r\n            if (typeOfquestion === 'trueFalse')\r\n                for (let i = 0; i < resultOfRespondent.length; i++)\r\n                    if (resultOfRespondent[i].isTrue) return resultOfRespondent[i].answer;\r\n            if (typeOfquestion === 'input' && resultOfRespondent[0].answer.length > 0)\r\n                return resultOfRespondent[0].answer;\r\n            if (typeOfquestion === 'multiSelect') {\r\n                let answers = [];\r\n                for (let i = 0; i < resultOfRespondent.length; i++)\r\n                    if (resultOfRespondent[i].isTrue) {\r\n                        answers.push(resultOfRespondent[i].answer);\r\n                    }\r\n                return answers.join(', ');\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const getCorrectAnswerOfQuestion = (questionOfAssignment) => {\r\n        const questionType = ['', 'multiChoice', 'trueFalse', 'input', 'multiSelect'];\r\n        const answerOfQuestion = questionOfAssignment?.option;\r\n        const typeOfquestion =\r\n            questionOfAssignment?.questionTypeId &&\r\n            questionType[questionOfAssignment?.questionTypeId];\r\n        if (answerOfQuestion && typeOfquestion && answerOfQuestion[typeOfquestion]) {\r\n            const resultOfQuestion = answerOfQuestion[typeOfquestion];\r\n            if (typeOfquestion === 'multiChoice')\r\n                for (let i = 0; i < resultOfQuestion.length; i++)\r\n                    if (resultOfQuestion[i].isTrue) return resultOfQuestion[i].answer;\r\n            if (typeOfquestion === 'trueFalse')\r\n                for (let i = 0; i < resultOfQuestion.length; i++)\r\n                    if (resultOfQuestion[i].isTrue) return resultOfQuestion[i].answer;\r\n            if (typeOfquestion === 'input' && resultOfQuestion[0].answer.length > 0)\r\n                return resultOfQuestion[0].answer;\r\n            if (typeOfquestion === 'multiSelect') {\r\n                let answers = [];\r\n                for (let i = 0; i < resultOfQuestion.length; i++)\r\n                    if (resultOfQuestion[i].isTrue) {\r\n                        answers.push(resultOfQuestion[i].answer);\r\n                    }\r\n                return answers.join(', ');\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getResultFromAnswer = async () => {\r\n            let res;\r\n            if (isTeacher)\r\n                res = await axiosJWT.get(\r\n                    API_URL + `teacher-question/teacher/assignment/${assignmentId}`\r\n                );\r\n            if (isParent) {\r\n                if (studentInfo) {\r\n                    res = await axiosJWT.get(\r\n                        API_URL +\r\n                            `parent/student/${studentInfo?.id}/assignment/${assignmentId}/result`\r\n                    );\r\n                }\r\n            }\r\n            if (!isTeacher && !isParent) {\r\n                res = await axiosJWT.get(\r\n                    API_URL + `student-question/student/assignment/${assignmentId}`\r\n                );\r\n            }\r\n            if (res) {\r\n                const questionsOfRespondent = res.data;\r\n                for (let i = 0; i < questionsOfRespondent.length; i++)\r\n                    questionsOfRespondent[i].index = i;\r\n                if (questionsOfRespondent && questionsOfRespondent.length > 0) {\r\n                    setListQuestionOfRespondent(questionsOfRespondent);\r\n                    let countCorrect = 0;\r\n                    let sumScore = 0;\r\n                    for (let i = 0; i < questionsOfRespondent.length; i++)\r\n                        if (questionsOfRespondent[i]?.answerOfRespondent?.isCorrect) {\r\n                            ++countCorrect;\r\n                            sumScore += questionsOfRespondent[i].score;\r\n                        }\r\n                    setNumberOfCorrectAnswers(countCorrect);\r\n                    setScore(sumScore);\r\n                }\r\n            }\r\n        };\r\n        getResultFromAnswer();\r\n        // if (isTeacher)\r\n        //     axiosJWT\r\n        //         .get(API_URL + `teacher-assignment/teacher/assignment/${assignmentId}`)\r\n        //         .then((res) => {\r\n        //             console.log(res.data);\r\n        //         });\r\n        // else\r\n        //     axiosJWT\r\n        //         .get(API_URL + `student-assignment/student/assignment/${assignmentId}`)\r\n        //         .then((res) => {\r\n        //             console.log(res.data);\r\n        //         });\r\n        axiosJWT.get(API_URL + `assignment/${assignmentId}`).then((res) => {\r\n            setAssignment(res.data);\r\n        });\r\n        axiosJWT.get(API_URL + `assignment-question/assignment/${assignmentId}`).then((res) => {\r\n            setListQuestionOfAssignment(res.data);\r\n        });\r\n    }, [assignmentId, isParent, isTeacher, studentInfo]);\r\n\r\n    return (\r\n        <div className='px-10 py-7 flex flex-row'>\r\n            {/* left */}\r\n            <div className=' bg-white  w-[40%] h-fit px-5 py-4 shadow rounded-lg'>\r\n                <div className='flex flex-col gap-5'>\r\n                    <div className='flex flex-col gap-3'>\r\n                        <span className='text-2xl font-[500] text-primary'>\r\n                            {assignment.assignmentName}\r\n                        </span>\r\n                        <span className='text-xl font-base'>Information</span>\r\n                        <div className='flex flex-row gap-5'>\r\n                            <div className='flex flex-row gap-3 w-[50%] text-sm items-center text-gray-500'>\r\n                                <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                    <i className='fa-regular fa-clock' />\r\n                                </div>\r\n                                <span>{assignment.doTime} mins</span>\r\n                            </div>\r\n                            <div className='flex flex-row gap-3 text-sm items-center text-gray-500'>\r\n                                <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                    <i className='fa-regular fa-calendar' />\r\n                                </div>\r\n                                <span>\r\n                                    {moment(assignment.dateDue).format('HH:mm A DD-MM-YYYY')}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex flex-row gap-5'>\r\n                            <div className='flex flex-row gap-3 w-[50%] text-sm items-center text-gray-500'>\r\n                                <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                    <i className='fa-solid fa-check'></i>\r\n                                </div>\r\n                                <span>Correct answers: {numberOfCorrectAnswers}</span>\r\n                            </div>\r\n                            <div className='flex flex-row gap-3 text-sm items-center text-gray-500'>\r\n                                <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                    <i className='fa-solid fa-award'></i>\r\n                                </div>\r\n                                <span>{score >= assignment.passScore ? `Passed` : `Failed`}</span>\r\n                            </div>\r\n                        </div>\r\n                        {/* correct Answer */}\r\n\r\n                        <div className='flex flex-row gap-5'>\r\n                            {/* Score */}\r\n                            <div className='flex flex-row gap-3 text-sm w-[50%] items-center text-gray-500'>\r\n                                <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                    <i className='fa-regular fa-star' />\r\n                                </div>\r\n                                <span>Score: {score}</span>\r\n                            </div>\r\n                            <div className='flex flex-row gap-3 text-sm items-center text-gray-500'>\r\n                                <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                    <i className='fa-regular fa-star' />\r\n                                </div>\r\n                                <span>Pass Score: {assignment.passScore}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex flex-row gap-3 text-sm items-center text-gray-500'>\r\n                            <div className='h-[40px] w-[40px] flex items-center justify-center bg-gray-100 rounded-lg'>\r\n                                <i className='fa-regular fa-star' />\r\n                            </div>\r\n                            <span>Total Score : {assignment.totalScore}</span>\r\n                        </div>\r\n                    </div>\r\n                    {/* answers */}\r\n                    <div className='flex flex-col gap-3'>\r\n                        <span className='text-xl font-base'>Your answers</span>\r\n                        <div className='flex flex-wrap gap-5 px-2 py-3 rounded-xl items-center'>\r\n                            {listQuestionOfRespondent.map((questionOfRespondent, i) => {\r\n                                return (\r\n                                    <div\r\n                                        onClick={() => executeScroll(i)}\r\n                                        key={i}\r\n                                        className='h-[40px] w-[30px] flex flex-col outline outline-2 outline-gray-200 hover:outline-red-400 rounded overflow-hidden transition-all cursor-pointer select-none'\r\n                                    >\r\n                                        <div className='flex justify-center items-center'>\r\n                                            <span>{i + 1}</span>\r\n                                        </div>\r\n\r\n                                        {questionOfRespondent?.answerOfRespondent?.isCorrect ? (\r\n                                            <div className='text-white flex w-full h-full items-center justify-center bg-green-400'>\r\n                                                <i className='fas fa-check text-[8px]'></i>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div className='text-white flex w-full h-full items-center justify-center bg-red-400'>\r\n                                                <i className='fa solid fa-xmark text-[8px]'></i>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* right */}\r\n            <div className='px-10 gap-5 h-[90vh] w-[60%] overflow-y-auto  items-center justify-center'>\r\n                <div className='flex flex-col gap-5 pb-5 '>\r\n                    {listQuestionOfRespondent.map((questionOfRespondent, i) => {\r\n                        return (\r\n                            <Result\r\n                                questionOfRespondent={questionOfRespondent}\r\n                                index={i}\r\n                                key={i}\r\n                                getCorrectAnswerOfQuestion={getCorrectAnswerOfQuestion}\r\n                                listQuestionOfAssignment={listQuestionOfAssignment}\r\n                                checkAnswered={checkAnswered}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AssignmentResult;\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["refreshToken","localStorage","getItem","axios","API_URL","headers","Authorization","res","data","console","log","newInstance","interceptors","request","use","config","accessToken","decodedToken","jwt_decode","exp","Date","now","tokens","setItem","err","useNavigate","navigate","questionOfRespondent","index","getCorrectAnswerOfQuestion","listQuestionOfAssignment","checkAnswered","useEffect","document","querySelector","setValue","String","raw","content","className","id","style","whiteSpace","fontSize","outline","userSelect","width","maxHeight","overflowWrap","fontFamily","readonly","find","questionOfAssignment","questionId","score","answerOfRespondent","isCorrect","axiosJWT","createAxiosJWT","isTeacher","isParent","assignmentId","useParams","useState","listQuestionOfRespondent","setListQuestionOfRespondent","setListQuestionOfAssignment","assignment","setAssignment","numberOfCorrectAnswers","setNumberOfCorrectAnswers","setScore","studentInfo","setStudentInfo","getStudentInfo","get","answer","typeOfquestion","questionTypeId","resultOfRespondent","i","length","isTrue","answers","push","join","answerOfQuestion","option","resultOfQuestion","getResultFromAnswer","questionsOfRespondent","countCorrect","sumScore","then","assignmentName","doTime","moment","dateDue","format","passScore","totalScore","map","onClick","elementId","getElementById","scrollIntoView","behavior","executeScroll","_taggedTemplateLiteral","strings","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}