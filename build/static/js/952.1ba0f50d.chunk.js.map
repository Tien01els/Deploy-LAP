{"version":3,"file":"static/js/952.1ba0f50d.chunk.js","mappings":"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","sources":["components/Button.js","components/Modals/ConfirmModal.js","components/Modals/TokenExpire.js","components/CustomeCheckbox.js","components/Student/MultiSelectAnswers.js","components/Teacher/AnswerType/InputAnswer.js","createAxiosJWT.js","components/Student/MultiChoiceAnswer.js","pages/AnswerQuestion.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({ children, className = '', ...rest }) => {\r\n    return (\r\n        <button\r\n            className={`bg-primary py-2 px-5 rounded-lg border-2 text-white transition-all active:scale-90 cursor-pointer select-none hover:bg-opacity-90 text-center border-none ${className} `}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react'\r\nimport Modal from 'react-modal'\r\nimport Button from '../Button'\r\n\r\nconst ConfirmModal = ({ isOpen, message, yesConfirm, noConfirm }) => {\r\n  const customStyles = {\r\n    overlay: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(165, 165, 165, 0.6)',\r\n    },\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      marginRight: '-50%',\r\n      transform: 'translate(-50%, -50%)',\r\n      border: 'none',\r\n      borderRadius: '8px',\r\n    },\r\n  }\r\n\r\n  const handleNoConfirm = () => {\r\n    noConfirm()\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      style={customStyles}\r\n      shouldCloseOnOverlayClick={true}\r\n      contentLabel=\"Example Modal\"\r\n      ariaHideApp={false}\r\n    >\r\n      <div className=\"flex flex-col gap-4 w-[500px]\">\r\n        <span className=\"text-2xl font-medium\">Confirm</span>\r\n        <span>{message}</span>\r\n      </div>\r\n      <div className=\"flex flex-row-reverse mt-5 gap-5\">\r\n        <Button onClick={yesConfirm}>Yes</Button>\r\n        <Button onClick={handleNoConfirm}>No</Button>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ConfirmModal\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { API_URL } from '../../constant';\r\nimport createAxiosJWT from '../../createAxiosJWT';\r\nimport Button from '../Button';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst TokenExpire = ({ isOpen }) => {\r\n    const customStyles = {\r\n        overlay: {\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            backgroundColor: 'rgba(165, 165, 165, 0.6)',\r\n        },\r\n        content: {\r\n            top: '50%',\r\n            left: '50%',\r\n            right: 'auto',\r\n            bottom: 'auto',\r\n            marginRight: '-50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n        },\r\n    };\r\n    const navigate = useNavigate();\r\n    const handleLogOut = async () => {\r\n        try {\r\n            await axiosJWT.delete(API_URL + 'account/logout');\r\n            localStorage.removeItem('access_token');\r\n            localStorage.removeItem('refresh_token');\r\n            navigate('/');\r\n            window.location.reload();\r\n        } catch (err) {\r\n            console.log(err);\r\n            localStorage.removeItem('access_token');\r\n            localStorage.removeItem('refresh_token');\r\n            navigate('/');\r\n            window.location.reload();\r\n        }\r\n    };\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            style={customStyles}\r\n            contentLabel='Example Modal'\r\n            ariaHideApp={false}\r\n        >\r\n            <div className='flex flex-col gap-4 w-[500px]'>\r\n                <span className='text-2xl font-medium'>Session Expired</span>\r\n                <span>\r\n                    Your session has expired please login again, click the button bellow to go back\r\n                    login screen\r\n                </span>\r\n                <div className='flex justify-center'>\r\n                    <Button onClick={handleLogOut} className='w-[50%]'>\r\n                        Login\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TokenExpire;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst CustomCheckbox = ({ item, onClickCheckbox, review }) => {\r\n  const [isChecked, setIsCheck] = useState(false)\r\n  const handleClickCustomCheckbox = (answer) => {\r\n    if (review) {\r\n      return\r\n    }\r\n    setIsCheck(!isChecked)\r\n    onClickCheckbox(answer)\r\n  }\r\n  useEffect(() => {\r\n    setIsCheck(item?.isTrue)\r\n  }, [item])\r\n\r\n  return (\r\n    <div\r\n      className={`flex flex-row gap-5 w-full rounded-lg select-none\r\n                    outline outline-[2px] outline-primary px-5 py-2 transition-all cursor-pointer ${\r\n                      isChecked ? `bg-primary text-white` : `text-primary`\r\n                    }`}\r\n      onClick={() => {\r\n        handleClickCustomCheckbox(item?.answer)\r\n      }}\r\n    >\r\n      <input type=\"checkbox\" value={item?.answer} className=\"hidden\" />\r\n      <label className=\"flex flex-row justify-between items-center w-full cursor-pointer\">\r\n        <span className=\"w-[80%] whitespace-normal break-words\">\r\n          {item?.answer}\r\n        </span>\r\n        <div className=\"flex items-center border justify-center rounded-full border-primary bg-white h-[20px] w-[20px]\">\r\n          {isChecked ? (\r\n            <i className=\"fa-solid fa-check text-green-400 text-xs\"></i>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomCheckbox\r\n","import React, { useState, useEffect } from 'react'\r\nimport CustomCheckbox from '../CustomeCheckbox'\r\n\r\nconst MultiSelectAnswers = ({ answers, setAnswers, review }) => {\r\n  const [answerSelect, setAnswerSelect] = useState([])\r\n  const handleOnChangeIsTrue = (answer) => {\r\n    const indexAnswer = answerSelect.findIndex(\r\n      (option) => option.answer === answer,\r\n    )\r\n    if (indexAnswer !== -1) {\r\n      answerSelect[indexAnswer].isTrue = !answerSelect[indexAnswer].isTrue\r\n      setAnswerSelect(answerSelect)\r\n      setAnswers({ ...answers, multiSelect: answerSelect })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (answers.multiSelect?.length > 0) setAnswerSelect(answers.multiSelect)\r\n  }, [answers])\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center gap-5\">\r\n      <div className=\"w-full\">\r\n        <span className=\"text-yellow-400\">Multi select question</span>\r\n      </div>\r\n      {answers?.multiSelect?.map((item, i) => {\r\n        return (\r\n          <CustomCheckbox\r\n            key={item.isTrue + item.answer + i}\r\n            item={item}\r\n            onClickCheckbox={handleOnChangeIsTrue}\r\n            review={review}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MultiSelectAnswers\r\n","import React, { useEffect, useState, useRef } from 'react'\r\n\r\nconst InputAnswer = ({  answers, setAnswers }) => {\r\n  const [answer, setAnswer] = useState('')\r\n\r\n  const preValue = useRef('')\r\n\r\n  useEffect(() => {\r\n    if (preValue.current !== answer && answer.length > 0) {\r\n      preValue.current = answer\r\n      setAnswers({ ...answers, input: [{ answer: answer }] })\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [answer])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      answers &&\r\n      answers?.input?.length === 1 &&\r\n      answer !== answers?.input[0]?.answer\r\n    ) {\r\n      setAnswer(answers.input[0]?.answer)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [answers])\r\n\r\n  return (\r\n    <div className=\"flex justify-center w-full\">\r\n      <textarea\r\n        value={answer}\r\n        onChange={(e) => setAnswer(e.target.value)}\r\n        placeholder=\"Enter the answer...\"\r\n        className=\"outline-primary resize-none transition-all border-2 border-gray-500 px-5 py-2 rounded-md w-[90%]\"\r\n      ></textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputAnswer\r\n","import axios from 'axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { API_URL } from './constant'\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem('refresh_token')\r\n    const res = await axios.post(\r\n      API_URL + `account/refresh-token`,\r\n      {},\r\n      {\r\n        headers: { Authorization: `Bearer ${refreshToken}` },\r\n      },\r\n    )\r\n    return res.data\r\n  } catch (err) {\r\n    // return navigation('/');\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nconst createAxiosJWT = () => {\r\n  const newInstance = axios.create()\r\n  newInstance.interceptors.request.use(\r\n    async (config) => {\r\n      const accessToken = localStorage.getItem('access_token')\r\n      if (accessToken) {\r\n        const decodedToken = jwt_decode(accessToken)\r\n        try {\r\n          if (decodedToken.exp < Date.now() / 1000) {\r\n            const tokens = await refreshToken()\r\n            localStorage.setItem('access_token', tokens.accessToken)\r\n            localStorage.setItem('refresh_token', tokens.refreshToken)\r\n            config.headers['Authorization'] = 'Bearer ' + tokens.accessToken\r\n          } else config.headers['Authorization'] = 'Bearer ' + accessToken\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      }\r\n      return config\r\n    },\r\n    (err) => {\r\n      console.log(err)\r\n      const navigate = useNavigate()\r\n      navigate('/')\r\n      // return Promise.reject(err);\r\n    },\r\n  )\r\n  return newInstance\r\n}\r\n\r\nexport default createAxiosJWT\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst MultiChoiceAnswer = ({ answers, setAnswers }) => {\r\n  const [chosenAnswer, setChosenAnswer] = useState(null)\r\n  const convert = ['a', 'b', 'c', 'd']\r\n\r\n  const handleAnswer = (e) => {\r\n    let { value } = e.target\r\n    setChosenAnswer(value)\r\n    setAnswers((prev) => ({\r\n      ...answers,\r\n      multiChoice: [\r\n        {\r\n          answer: prev.multiChoice[0]?.answer,\r\n          isTrue: value === 'a' ? true : false,\r\n        },\r\n        {\r\n          answer: prev.multiChoice[1]?.answer,\r\n          isTrue: value === 'b' ? true : false,\r\n        },\r\n        {\r\n          answer: prev.multiChoice[2]?.answer,\r\n          isTrue: value === 'c' ? true : false,\r\n        },\r\n        {\r\n          answer: prev.multiChoice[3]?.answer,\r\n          isTrue: value === 'd' ? true : false,\r\n        },\r\n      ],\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const trueAnswer = answers.multiChoice?.findIndex(\r\n      (element) => element.isTrue === true,\r\n    )\r\n    setChosenAnswer(convert[trueAnswer])\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [answers])\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap\">\r\n      <div className=\"hidden\">\r\n        <input\r\n          type=\"radio\"\r\n          onChange={(e) => handleAnswer(e)}\r\n          value=\"a\"\r\n          id=\"option-A\"\r\n          name=\"chosenAnswer\"\r\n        />\r\n        <input\r\n          type=\"radio\"\r\n          onChange={(e) => handleAnswer(e)}\r\n          value=\"b\"\r\n          id=\"option-B\"\r\n          name=\"chosenAnswer\"\r\n        />\r\n        <input\r\n          type=\"radio\"\r\n          onChange={(e) => handleAnswer(e)}\r\n          value=\"c\"\r\n          id=\"option-C\"\r\n          name=\"chosenAnswer\"\r\n        />\r\n        <input\r\n          type=\"radio\"\r\n          onChange={(e) => handleAnswer(e)}\r\n          value=\"d\"\r\n          id=\"option-D\"\r\n          name=\"chosenAnswer\"\r\n        />\r\n      </div>\r\n      <div className=\"flex flex-col w-full gap-5 my-5\">\r\n        <label\r\n          htmlFor=\"option-A\"\r\n          className={`border border-primary outline-none w-full inline-block whitespace-normal break-words px-5 justify-center py-3 rounded-lg transition-all cursor-pointer ${\r\n            chosenAnswer === 'a'\r\n              ? 'bg-primary text-white'\r\n              : 'text-primary bg-white'\r\n          }`}\r\n        >\r\n          {answers.multiChoice[0]?.answer}\r\n        </label>\r\n        <label\r\n          htmlFor=\"option-B\"\r\n          className={`border border-primary outline-none w-full inline-block whitespace-normal break-words px-5 h-fit justify-center py-3 rounded-lg transition-all cursor-pointer ${\r\n            chosenAnswer === 'b'\r\n              ? 'bg-primary text-white'\r\n              : 'text-primary bg-white'\r\n          }`}\r\n        >\r\n          {answers.multiChoice[1]?.answer}\r\n        </label>\r\n        <label\r\n          htmlFor=\"option-C\"\r\n          className={`border border-primary outline-none w-full inline-block whitespace-normal break-words px-5 h-fit justify-center py-3 rounded-lg transition-all cursor-pointer ${\r\n            chosenAnswer === 'c'\r\n              ? 'bg-primary text-white'\r\n              : 'text-primary bg-white'\r\n          }`}\r\n        >\r\n          {answers.multiChoice[2]?.answer}\r\n        </label>\r\n        <label\r\n          htmlFor=\"option-D\"\r\n          className={`border border-primary outline-none w-full inline-block whitespace-normal break-words px-5 h-fit justify-center py-3 rounded-lg transition-all cursor-pointer ${\r\n            chosenAnswer === 'd'\r\n              ? 'bg-primary text-white'\r\n              : 'text-primary bg-white'\r\n          }`}\r\n        >\r\n          {answers.multiChoice[3]?.answer}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MultiChoiceAnswer\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport 'mathlive';\r\nimport moment from 'moment';\r\n\r\nimport { API_URL } from '../constant';\r\nimport Button from '../components/Button';\r\n// import MultiChoice from '../components/Teacher/AnswerType/MultiChoice';\r\n// import TrueFalse from '../components/Teacher/AnswerType/TrueFalse';\r\nimport MultiChoiceAnswer from '../components/Student/MultiChoiceAnswer';\r\nimport TrueFalseAnswer from '../components/Student/TrueFalseAnswer';\r\nimport MultiSelectAnswers from '../components/Student/MultiSelectAnswers';\r\nimport InputAnswer from '../components/Teacher/AnswerType/InputAnswer';\r\nimport TokenExpire from '../components/Modals/TokenExpire';\r\nimport ConfirmModal from '../components/Modals/ConfirmModal';\r\n\r\nimport createAxiosJWT from '../createAxiosJWT';\r\n\r\nconst axiosJWT = createAxiosJWT();\r\nconst AnswerQuestion = ({ isTeacher }) => {\r\n    const navigate = useNavigate();\r\n    const { assignmentId, questionIndex } = useParams();\r\n    //   const [countdown, setCountdown] = useState()\r\n    const [isExpired, setIsExpired] = useState(false);\r\n    const [isConfirm, setIsConfirm] = useState(false);\r\n    const [currentQuestion, setCurrentQuestion] = useState();\r\n    const [currentQuestionId, setCurrentQuestionId] = useState();\r\n    const [listQuestionOfAssignment, setListQuestionOfAssignment] = useState([]);\r\n    const [answers, setAnswers] = useState();\r\n    const [timeDown, setTimeDown] = useState();\r\n    const [doTime, setDoTime] = useState('00:00:00');\r\n    const [isSubmit, setIsSubmit] = useState(true);\r\n\r\n    // const convertMinutes = (minutesDo) => {\r\n    //     const h = (minutesDo / 3600) | 0,\r\n    //         m = (minutesDo / 60) | 0,\r\n    //         s = minutesDo % 60 | 0;\r\n    //     return moment.utc().hours(h).minutes(m).seconds(s).format('HH : mm : ss');\r\n    // };\r\n\r\n    // const formatCountDown = (duration) => {\r\n    //     const hours =\r\n    //         duration.hours() && duration.hours() > 9\r\n    //             ? `${duration.hours()}:`\r\n    //             : `0${duration.hours()}:` || '';\r\n    //     const minutes =\r\n    //         duration.minutes() && duration.minutes() > 9\r\n    //             ? `${duration.minutes()}:`\r\n    //             : `0${duration.minutes()}:` || '';\r\n    //     const seconds =\r\n    //         duration.seconds() && duration.seconds() > 9\r\n    //             ? `${duration.seconds()}`\r\n    //             : `0${duration.seconds()}` || '';\r\n    //     return hours + minutes + seconds;\r\n    // };\r\n\r\n    const checkAnswered = (questionOfAssignment) => {\r\n        const questionType = ['', 'multiChoice', 'trueFalse', 'input', 'multiSelect'];\r\n        const answerOfRespondent = questionOfAssignment?.answerOfRespondent?.answer;\r\n        const typeOfquestion =\r\n            questionOfAssignment?.questionTypeId &&\r\n            questionType[questionOfAssignment?.questionTypeId];\r\n        if (answerOfRespondent && typeOfquestion && answerOfRespondent[typeOfquestion]) {\r\n            const resultOfUser = answerOfRespondent[typeOfquestion];\r\n            if (typeOfquestion === 'multiChoice')\r\n                for (let i = 0; i < resultOfUser.length; i++)\r\n                    if (resultOfUser[i].isTrue) return true;\r\n            if (typeOfquestion === 'trueFalse')\r\n                for (let i = 0; i < resultOfUser.length; i++)\r\n                    if (resultOfUser[i].isTrue) return true;\r\n            if (typeOfquestion === 'input' && resultOfUser[0].answer.length > 0) return true;\r\n            if (typeOfquestion === 'multiSelect')\r\n                for (let i = 0; i < resultOfUser.length; i++)\r\n                    if (resultOfUser[i].isTrue) return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handleSaveAnswer = async () => {\r\n        try {\r\n            if (isTeacher)\r\n                await axiosJWT.put(\r\n                    API_URL +\r\n                        `teacher-question/${currentQuestion?.answerOfRespondent?.respondentQuestionId}`,\r\n                    {\r\n                        answer: answers,\r\n                    }\r\n                );\r\n            else\r\n                await axiosJWT.put(\r\n                    API_URL +\r\n                        `student-question/${currentQuestion?.answerOfRespondent?.respondentQuestionId}`,\r\n                    {\r\n                        answer: answers,\r\n                    }\r\n                );\r\n            if (currentQuestion?.index < listQuestionOfAssignment.length - 1)\r\n                handleQuestionOfAssignment(currentQuestion?.index + 1);\r\n            else {\r\n                handleQuestionOfAssignment(currentQuestion?.index);\r\n                setIsConfirm(true);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    };\r\n\r\n    const handleQuestionOfAssignment = useCallback(\r\n        async (index) => {\r\n            try {\r\n                const questionIdx = index || 0;\r\n                let res;\r\n                if (isTeacher)\r\n                    res = await axiosJWT.get(\r\n                        API_URL + `teacher-question/teacher/assignment/${assignmentId}`\r\n                    );\r\n                else\r\n                    res = await axiosJWT.get(\r\n                        API_URL + `student-question/student/assignment/${assignmentId}`\r\n                    );\r\n                if (res) {\r\n                    const questionsOfAssignment = res.data;\r\n                    for (let i = 0; i < questionsOfAssignment.length; i++)\r\n                        questionsOfAssignment[i].index = i;\r\n                    if (questionsOfAssignment && questionsOfAssignment.length > 0) {\r\n                        setListQuestionOfAssignment(questionsOfAssignment);\r\n                        setCurrentQuestionId(questionsOfAssignment[questionIdx]?.id);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                if (error.response.status === 401) setIsExpired(true);\r\n            }\r\n        },\r\n        [assignmentId, isTeacher]\r\n    );\r\n\r\n    const handleSubmitAssignment = async () => {\r\n        try {\r\n            if (isTeacher)\r\n                await axiosJWT.put(\r\n                    API_URL +\r\n                        `teacher-question/${currentQuestion?.answerOfRespondent?.respondentQuestionId}`,\r\n                    {\r\n                        answer: answers,\r\n                    }\r\n                );\r\n            else\r\n                await axiosJWT.put(\r\n                    API_URL +\r\n                        `student-question/${currentQuestion?.answerOfRespondent?.respondentQuestionId}`,\r\n                    {\r\n                        answer: answers,\r\n                    }\r\n                );\r\n\r\n            handleQuestionOfAssignment(currentQuestion?.index);\r\n            setIsConfirm(true);\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    };\r\n\r\n    const handleConfirmSubmitAssignmet = useCallback(async () => {\r\n        try {\r\n            if (isTeacher)\r\n                !isSubmit &&\r\n                    (await axiosJWT.put(\r\n                        API_URL + `teacher-assignment/teacher/assignment/${assignmentId}/submit`\r\n                    ));\r\n            else\r\n                !isSubmit &&\r\n                    (await axiosJWT.put(\r\n                        API_URL + `student-assignment/student/assignment/${assignmentId}/submit`\r\n                    ));\r\n            navigate(`/assignment/${assignmentId}/result`);\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (error.response.status === 401) setIsExpired(true);\r\n        }\r\n    }, [assignmentId, navigate, isSubmit, isTeacher]);\r\n\r\n    useEffect(() => {\r\n        if (timeDown && timeDown < 0) {\r\n            setDoTime('00:00:00');\r\n            handleConfirmSubmitAssignmet();\r\n        }\r\n    }, [timeDown, handleConfirmSubmitAssignmet]);\r\n\r\n    useEffect(() => {\r\n        handleQuestionOfAssignment();\r\n    }, [handleQuestionOfAssignment]);\r\n\r\n    useEffect(() => {\r\n        const countDownTime = async () => {\r\n            let res;\r\n            if (isTeacher)\r\n                res = await axiosJWT.get(\r\n                    API_URL + `teacher-assignment/teacher/assignment/${assignmentId}/do-time`\r\n                );\r\n            else\r\n                res = await axiosJWT.get(\r\n                    API_URL + `student-assignment/student/assignment/${assignmentId}/do-time`\r\n                );\r\n            if (res) {\r\n                const assignmentTime = res.data;\r\n                setIsSubmit(!!assignmentTime?.dateComplete);\r\n                if (!!assignmentTime?.dateComplete) {\r\n                    navigate(`/assignment/${assignmentId}/result`);\r\n                    return;\r\n                }\r\n                const currentTimerId = setInterval(() => {\r\n                    const dateEnd = moment(assignmentTime?.dateEnd).diff(moment());\r\n                    const diff = moment(dateEnd).utcOffset(0).format('HH:mm:ss');\r\n                    setTimeDown(dateEnd);\r\n                    setDoTime(diff);\r\n                    // console.log(dateEnd)\r\n                    // console.log(diff)\r\n                }, 1000);\r\n                return () => {\r\n                    clearInterval(currentTimerId);\r\n                };\r\n            }\r\n        };\r\n        const clearTimer = countDownTime();\r\n        return () => clearTimer.then((clearTimerId) => clearTimerId && clearTimerId());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [assignmentId]);\r\n\r\n    useEffect(() => {\r\n        setCurrentQuestion(\r\n            listQuestionOfAssignment.find(\r\n                (questionOfAssignment) => questionOfAssignment.id === currentQuestionId\r\n            )\r\n        );\r\n    }, [currentQuestionId, listQuestionOfAssignment]);\r\n\r\n    useEffect(() => {\r\n        if (currentQuestion) {\r\n            const answerOfRespondent = {\r\n                multiChoice: currentQuestion.answerOfRespondent?.answer?.multiChoice?.map(\r\n                    (multiChoice, i) => ({\r\n                        isTrue: multiChoice?.isTrue,\r\n                        answer: currentQuestion.contentQuestion?.multiChoice[i]?.answer,\r\n                    })\r\n                ),\r\n                multiSelect: currentQuestion.answerOfRespondent?.answer?.multiSelect?.map(\r\n                    (multiSelect, i) => ({\r\n                        isTrue: multiSelect?.isTrue,\r\n                        answer: currentQuestion.contentQuestion?.multiSelect[i]?.answer,\r\n                    })\r\n                ),\r\n                input: currentQuestion.answerOfRespondent?.answer?.input,\r\n                trueFalse: currentQuestion.answerOfRespondent?.answer?.trueFalse?.map(\r\n                    (trueFalse, i) => ({\r\n                        isTrue: trueFalse?.isTrue,\r\n                        answer: currentQuestion.contentQuestion?.trueFalse[i]?.answer,\r\n                    })\r\n                ),\r\n            };\r\n\r\n            const newAnswer = {\r\n                multiChoice: currentQuestion.contentQuestion?.multiChoice?.map((multiChoice) => ({\r\n                    isTrue: false,\r\n                    answer: multiChoice.answer,\r\n                })),\r\n                multiSelect: currentQuestion.contentQuestion?.multiSelect?.map((multiSelect) => ({\r\n                    isTrue: false,\r\n                    answer: multiSelect.answer,\r\n                })),\r\n                input: [{ answer: '' }],\r\n                trueFalse: currentQuestion.contentQuestion?.trueFalse?.map((trueFalse) => ({\r\n                    isTrue: false,\r\n                    answer: trueFalse.answer,\r\n                })),\r\n            };\r\n            setAnswers(currentQuestion.answerOfRespondent?.answer ? answerOfRespondent : newAnswer);\r\n        }\r\n    }, [currentQuestion, isTeacher]);\r\n\r\n    // useEffect(() => {\r\n    //     listQuestionOfAssignment &&\r\n    //         setCurrentQuestionId(listQuestionOfAssignment[questionIndex - 1]?.id);\r\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    // }, [questionIndex, listQuestionOfAssignment]);\r\n\r\n    const renderAnswer = (questionTypeId) => {\r\n        switch (questionTypeId) {\r\n            case 1:\r\n                return answers && <MultiChoiceAnswer answers={answers} setAnswers={setAnswers} />;\r\n            // contentQuestion.multiChoice = contentQuestion?.multiChoice.map((multiChoice) => ({\r\n            //     isTrue: false,\r\n            //     answer: multiChoice.answer,\r\n            // }));\r\n            case 2:\r\n                return answers && <TrueFalseAnswer answers={answers} setAnswers={setAnswers} />;\r\n            // contentQuestion.trueFalse = contentQuestion?.trueFalse.map((trueFalse) => ({\r\n            //     isTrue: false,\r\n            //     answer: trueFalse.answer,\r\n            // }));\r\n            case 3:\r\n                return answers && <InputAnswer answers={answers} setAnswers={setAnswers} />;\r\n            // <textarea\r\n            //     placeholder='Enter the answer...'\r\n            //     className='outline-primary resize-none transition-all border-2 border-gray-500 px-5 py-2 rounded-md w-[100%]'\r\n            // ></textarea>\r\n            case 4:\r\n                return answers && <MultiSelectAnswers answers={answers} setAnswers={setAnswers} />;\r\n            default:\r\n                return <div>404</div>;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const mf = document.querySelector('#formula');\r\n        mf.setValue(\r\n            String.raw`\\begin{multline}\r\n    ` +\r\n                currentQuestion?.content +\r\n                String.raw`\r\n    \\end{multline}`\r\n        );\r\n    }, [currentQuestion?.content]);\r\n\r\n    return (\r\n        <div className='flex flex-col px-10 gap-5 py-7'>\r\n            <h2 className='font-semibold font-inter px-3 text-xl'>Assignment name</h2>\r\n            <div className='flex flex-row gap-5 h-fit w-full'>\r\n                {/* right */}\r\n                <div className='flex flex-col w-[65%] gap-5'>\r\n                    <div className='w-full bg-white shadow rounded-lg px-12 pt-7 pb-5 flex flex-col gap-5 text-justify'>\r\n                        <div className='flex'>\r\n                            <h2 className='font-semibold font-inter text-primary rounded-lg text-xl'>\r\n                                Question - {currentQuestion?.index + 1}\r\n                            </h2>\r\n                        </div>\r\n                        {/* problem */}\r\n                        <math-field\r\n                            id='formula'\r\n                            style={{\r\n                                whiteSpace: 'initial',\r\n                                fontSize: '20px',\r\n                                outline: 'none',\r\n                                padding: '0.5rem 1.5rem',\r\n                                userSelect: 'none',\r\n                                width: '100%',\r\n                                maxHeight: '150px',\r\n                                overflowWrap: 'break-word',\r\n                                fontFamily: 'Poppins',\r\n                            }}\r\n                            readonly\r\n                        ></math-field>\r\n                        {/* answer */}\r\n                        <div className=''>{renderAnswer(currentQuestion?.questionTypeId)}</div>\r\n                        {/* Next */}\r\n                        <div className='flex flex-row-reverse'>\r\n                            <Button className='border-none' onClick={handleSaveAnswer}>\r\n                                {currentQuestion?.index === listQuestionOfAssignment.length - 1\r\n                                    ? 'Submit'\r\n                                    : 'Next'}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* left */}\r\n                <div className='flex flex-col gap-5 w-[35%]'>\r\n                    <div className='flex flex-col h-[450px] pt-7 px-5 pb-5 items-center bg-white justify-between rounded-lg shadow'>\r\n                        <div className='flex flex-col items-center gap-3 h-full '>\r\n                            <span className='font-semibold text-2xl text-primary'>{doTime}</span>\r\n                            <div className='flex flex-wrap gap-5 max-h-[300px] px-5 overflow-y-auto py-3'>\r\n                                {listQuestionOfAssignment.map((questionOfAssignment, i) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={questionOfAssignment.id}\r\n                                            className='h-[40px] w-[30px] flex flex-col outline outline-2 outline-gray-500 hover:outline-green-500 rounded overflow-hidden transition-all cursor-pointer select-none'\r\n                                            onClick={() =>\r\n                                                setCurrentQuestionId(questionOfAssignment.id)\r\n                                            }\r\n                                        >\r\n                                            <div className='flex justify-center items-center'>\r\n                                                <span>{i + 1}</span>\r\n                                            </div>\r\n                                            {checkAnswered(questionOfAssignment) && (\r\n                                                <div className='text-white flex w-full h-full items-center justify-center bg-primary'></div>\r\n                                            )}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <Button className='border-none w-[70%]' onClick={handleSubmitAssignment}>\r\n                            Submit\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <TokenExpire isOpen={isExpired} />\r\n            <ConfirmModal\r\n                isOpen={isConfirm}\r\n                message='Do you want submit assignment?'\r\n                yesConfirm={handleConfirmSubmitAssignmet}\r\n                noConfirm={() => setIsConfirm(false)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnswerQuestion;\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["children","className","rest","isOpen","message","yesConfirm","noConfirm","style","overlay","position","top","left","right","bottom","backgroundColor","content","marginRight","transform","border","borderRadius","shouldCloseOnOverlayClick","contentLabel","ariaHideApp","onClick","axiosJWT","createAxiosJWT","navigate","useNavigate","handleLogOut","delete","API_URL","localStorage","removeItem","window","location","reload","console","log","item","onClickCheckbox","review","useState","isChecked","setIsCheck","useEffect","isTrue","answer","type","value","answers","setAnswers","answerSelect","setAnswerSelect","handleOnChangeIsTrue","indexAnswer","findIndex","option","multiSelect","length","map","i","setAnswer","preValue","useRef","current","input","onChange","e","target","placeholder","refreshToken","getItem","axios","headers","Authorization","res","data","newInstance","interceptors","request","use","config","accessToken","decodedToken","jwt_decode","exp","Date","now","tokens","setItem","err","chosenAnswer","setChosenAnswer","convert","handleAnswer","prev","multiChoice","trueAnswer","element","id","name","htmlFor","isTeacher","useParams","assignmentId","questionIndex","isExpired","setIsExpired","isConfirm","setIsConfirm","currentQuestion","setCurrentQuestion","currentQuestionId","setCurrentQuestionId","listQuestionOfAssignment","setListQuestionOfAssignment","timeDown","setTimeDown","doTime","setDoTime","isSubmit","setIsSubmit","checkAnswered","questionOfAssignment","answerOfRespondent","typeOfquestion","questionTypeId","resultOfUser","handleSaveAnswer","put","respondentQuestionId","index","handleQuestionOfAssignment","response","status","useCallback","questionIdx","get","questionsOfAssignment","handleSubmitAssignment","handleConfirmSubmitAssignmet","countDownTime","assignmentTime","dateComplete","currentTimerId","setInterval","dateEnd","moment","diff","utcOffset","format","clearInterval","clearTimer","then","clearTimerId","find","contentQuestion","trueFalse","newAnswer","document","querySelector","setValue","String","raw","whiteSpace","fontSize","outline","padding","userSelect","width","maxHeight","overflowWrap","fontFamily","readonly","TrueFalseAnswer","InputAnswer","MultiSelectAnswers","renderAnswer","Button","TokenExpire","ConfirmModal","_taggedTemplateLiteral","strings","slice","Object","freeze","defineProperties"],"sourceRoot":""}